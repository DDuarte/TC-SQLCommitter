<assemblies><assembly name="C:\Users\Duarte\Documents\Visual Studio 2012\Projects\libgit2sharp-vNext\LibGit2Sharp.Tests\bin\Release\LibGit2Sharp.Tests.dll" run-date="2013-08-01" run-time="01:40:33" configFile="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\MSBuild.exe.Config" time="218.249" total="818" passed="813" failed="0" skipped="5" environment="64-bit .NET 4.0.30319.18213" test-framework="xUnit.net 1.9.0.1566"><class time="25.864" name="LibGit2Sharp.Tests.CheckoutFixture" total="55" passed="55" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.CheckoutFixture.ForceCheckoutRetainsIgnoredChanges" type="LibGit2Sharp.Tests.CheckoutFixture" method="ForceCheckoutRetainsIgnoredChanges" result="Pass" time="3.027" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutCallsCheckoutNotify(notifyFlags: Ignored, expectedNotificationPath: &quot;bin&quot;, isDirectory: True)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutCallsCheckoutNotify" result="Pass" time="0.429" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutCallsCheckoutNotify(notifyFlags: Conflict, expectedNotificationPath: &quot;conflict.txt&quot;, isDirectory: False)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutCallsCheckoutNotify" result="Pass" time="0.296" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutCallsCheckoutNotify(notifyFlags: Updated, expectedNotificationPath: &quot;updated.txt&quot;, isDirectory: False)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutCallsCheckoutNotify" result="Pass" time="0.365" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutCallsCheckoutNotify(notifyFlags: Untracked, expectedNotificationPath: &quot;untracked.txt&quot;, isDirectory: False)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutCallsCheckoutNotify" result="Pass" time="0.802" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutThroughBranchCallsCheckoutProgress" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutThroughBranchCallsCheckoutProgress" result="Pass" time="0.136" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutWithMergeConflictsThrows" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutWithMergeConflictsThrows" result="Pass" time="0.209" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutABranchDoesNotAlterBinaryFiles" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutABranchDoesNotAlterBinaryFiles" result="Pass" time="0.797" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutRetainsUnstagedChanges" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutRetainsUnstagedChanges" result="Pass" time="0.130" /><test name="LibGit2Sharp.Tests.CheckoutFixture.ForceCheckoutRetainsUntrackedChanges" type="LibGit2Sharp.Tests.CheckoutFixture" method="ForceCheckoutRetainsUntrackedChanges" result="Pass" time="0.131" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutBranchFromDetachedHead" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutBranchFromDetachedHead" result="Pass" time="0.532" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutLowerCasedHeadThrows" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutLowerCasedHeadThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutBranchSnapshot" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutBranchSnapshot" result="Pass" time="0.167" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutAgainstAnUnbornBranchThrows" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutAgainstAnUnbornBranchThrows" result="Pass" time="0.101" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutRetainsStagedChanges" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutRetainsStagedChanges" result="Pass" time="0.171" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutInABareRepoThrows" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutInABareRepoThrows" result="Pass" time="0.017" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutRetainsUntrackedChanges" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutRetainsUntrackedChanges" result="Pass" time="0.222" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutAnExistingBranchByName(branchName: &quot;i-do-numbers&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutAnExistingBranchByName" result="Pass" time="0.699" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutAnExistingBranchByName(branchName: &quot;diff-test-cases&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutAnExistingBranchByName" result="Pass" time="0.584" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutUpdatesModifiedFilesInWorkingDirectory" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutUpdatesModifiedFilesInWorkingDirectory" result="Pass" time="0.197" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutPreviousCheckedOutBranch" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutPreviousCheckedOutBranch" result="Pass" time="0.644" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutThroughRepositoryCallsCheckoutProgress" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutThroughRepositoryCallsCheckoutProgress" result="Pass" time="0.174" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutDetachedHead" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutDetachedHead" result="Pass" time="0.528" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutABranchWithBadParamsThrows" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutABranchWithBadParamsThrows" result="Pass" time="0.020" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutFromDetachedHead(commitPointer: &quot;e90810^{}&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutFromDetachedHead" result="Pass" time="0.586" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutFromDetachedHead(commitPointer: &quot;a447ba2ca8&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutFromDetachedHead" result="Pass" time="0.808" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutFromDetachedHead(commitPointer: &quot;refs/tags/lw&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutFromDetachedHead" result="Pass" time="0.609" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutPathFromCurrentBranch(fileName: &quot;new.txt&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutPathFromCurrentBranch" result="Pass" time="0.486" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutPathFromCurrentBranch(fileName: &quot;1.txt&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutPathFromCurrentBranch" result="Pass" time="0.485" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutPaths" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutPaths" result="Pass" time="0.497" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutANonExistingBranchThrows" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutANonExistingBranchThrows" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCancelCheckoutThroughNotifyCallback" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCancelCheckoutThroughNotifyCallback" result="Pass" time="0.269" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutRemovesExtraFilesInWorkingDirectory" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutRemovesExtraFilesInWorkingDirectory" result="Pass" time="0.259" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutAttachedHead" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutAttachedHead" result="Pass" time="0.445" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutAnExistingBranch(branchName: &quot;i-do-numbers&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutAnExistingBranch" result="Pass" time="0.509" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutAnExistingBranch(branchName: &quot;diff-test-cases&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutAnExistingBranch" result="Pass" time="0.552" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutRemoteBranchResultsInDetachedHead(remoteBranchSpec: &quot;origin/master&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutRemoteBranchResultsInDetachedHead" result="Pass" time="0.498" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutRemoteBranchResultsInDetachedHead(remoteBranchSpec: &quot;master@{u}&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutRemoteBranchResultsInDetachedHead" result="Pass" time="0.909" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckingOutRemoteBranchResultsInDetachedHead(remoteBranchSpec: &quot;refs/remotes/origin/master&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckingOutRemoteBranchResultsInDetachedHead" result="Pass" time="0.884" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutPath(originalBranch: &quot;master&quot;, checkoutFrom: &quot;i-do-numbers&quot;, path: &quot;super-file.txt&quot;, expectedStatus: Added)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutPath" result="Pass" time="0.486" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutPath(originalBranch: &quot;master&quot;, checkoutFrom: &quot;6dcf9bf&quot;, path: &quot;readme.txt&quot;, expectedStatus: Added)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutPath" result="Pass" time="0.509" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutPath(originalBranch: &quot;i-do-numbers&quot;, checkoutFrom: &quot;diff-test-cases&quot;, path: &quot;numbers.txt&quot;, expectedStatus: Staged)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutPath" result="Pass" time="0.512" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutPath(originalBranch: &quot;master&quot;, checkoutFrom: &quot;refs/tags/lw&quot;, path: &quot;readme.txt&quot;, expectedStatus: Added)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutPath" result="Pass" time="0.471" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutBranchByShortNameAttachesTheHead(shortBranchName: &quot;heads/master&quot;, referenceName: &quot;refs/heads/master&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutBranchByShortNameAttachesTheHead" result="Pass" time="0.520" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutBranchByShortNameAttachesTheHead(shortBranchName: &quot;master&quot;, referenceName: &quot;refs/heads/master&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutBranchByShortNameAttachesTheHead" result="Pass" time="0.497" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutAnArbitraryCommit(commitPointer: &quot;6dcf9bf&quot;, checkoutByCommitOrBranchSpec: False, expectedReflogTarget: &quot;6dcf9bf7541ee10456529833502442f385010c3d&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutAnArbitraryCommit" result="Pass" time="0.464" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutAnArbitraryCommit(commitPointer: &quot;6dcf9bf&quot;, checkoutByCommitOrBranchSpec: True, expectedReflogTarget: &quot;6dcf9bf&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutAnArbitraryCommit" result="Pass" time="0.744" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutAnArbitraryCommit(commitPointer: &quot;refs/tags/lw&quot;, checkoutByCommitOrBranchSpec: False, expectedReflogTarget: &quot;e90810b8df3e80c413d903f631643c716887138d&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutAnArbitraryCommit" result="Pass" time="0.694" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutAnArbitraryCommit(commitPointer: &quot;HEAD~2&quot;, checkoutByCommitOrBranchSpec: True, expectedReflogTarget: &quot;HEAD~2&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutAnArbitraryCommit" result="Pass" time="0.443" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutAnArbitraryCommit(commitPointer: &quot;HEAD~2&quot;, checkoutByCommitOrBranchSpec: False, expectedReflogTarget: &quot;4c062a6361ae6959e06292c1fa5e2822d9c96345&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutAnArbitraryCommit" result="Pass" time="0.487" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanCheckoutAnArbitraryCommit(commitPointer: &quot;refs/tags/lw&quot;, checkoutByCommitOrBranchSpec: True, expectedReflogTarget: &quot;refs/tags/lw&quot;)" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanCheckoutAnArbitraryCommit" result="Pass" time="0.487" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutRetainsIgnoredChanges" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutRetainsIgnoredChanges" result="Pass" time="0.132" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutCurrentReference" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutCurrentReference" result="Pass" time="0.475" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CanForcefullyCheckoutWithConflictingStagedChanges" type="LibGit2Sharp.Tests.CheckoutFixture" method="CanForcefullyCheckoutWithConflictingStagedChanges" result="Pass" time="0.531" /><test name="LibGit2Sharp.Tests.CheckoutFixture.CheckoutAddsMissingFilesInWorkingDirectory" type="LibGit2Sharp.Tests.CheckoutFixture" method="CheckoutAddsMissingFilesInWorkingDirectory" result="Pass" time="0.231" /></class><class time="5.570" name="LibGit2Sharp.Tests.FilterBranchFixture" total="16" passed="15" failed="0" skipped="1"><test name="LibGit2Sharp.Tests.FilterBranchFixture.RefRewritingRollsBackOnFailure" type="LibGit2Sharp.Tests.FilterBranchFixture" method="RefRewritingRollsBackOnFailure" result="Pass" time="0.525" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.CanProvideNewNamesForTags" type="LibGit2Sharp.Tests.FilterBranchFixture" method="CanProvideNewNamesForTags" result="Pass" time="0.392" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.CanRewriteAuthorOfCommitsOnlyBeingPointedAtByTags" type="LibGit2Sharp.Tests.FilterBranchFixture" method="CanRewriteAuthorOfCommitsOnlyBeingPointedAtByTags" result="Pass" time="0.287" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.CanRewriteTrees" type="LibGit2Sharp.Tests.FilterBranchFixture" method="CanRewriteTrees" result="Pass" time="0.336" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.CanRewriteHistoryWithoutChangingCommitMetadata" type="LibGit2Sharp.Tests.FilterBranchFixture" method="CanRewriteHistoryWithoutChangingCommitMetadata" result="Pass" time="0.172" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.CanNotOverWriteAnExistingReference" type="LibGit2Sharp.Tests.FilterBranchFixture" method="CanNotOverWriteAnExistingReference" result="Pass" time="0.315" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.OnlyRewriteSelectedCommits" type="LibGit2Sharp.Tests.FilterBranchFixture" method="OnlyRewriteSelectedCommits" result="Pass" time="0.764" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.CanRewriteAuthorOfCommits" type="LibGit2Sharp.Tests.FilterBranchFixture" method="CanRewriteAuthorOfCommits" result="Pass" time="0.526" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.CanRewriteParents" type="LibGit2Sharp.Tests.FilterBranchFixture" method="CanRewriteParents" result="Pass" time="0.296" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.WritesCorrectReflogMessagesForSimpleRewrites" type="LibGit2Sharp.Tests.FilterBranchFixture" method="WritesCorrectReflogMessagesForSimpleRewrites" result="Pass" time="0.279" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.CanRewriteHistoryWithoutChangingTrees" type="LibGit2Sharp.Tests.FilterBranchFixture" method="CanRewriteHistoryWithoutChangingTrees" result="Pass" time="0.223" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.CanCustomizeTheNamespaceOfBackedUpRefs" type="LibGit2Sharp.Tests.FilterBranchFixture" method="CanCustomizeTheNamespaceOfBackedUpRefs" result="Pass" time="0.440" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.DoesNotRewriteRefsThatDontChange" type="LibGit2Sharp.Tests.FilterBranchFixture" method="DoesNotRewriteRefsThatDontChange" result="Pass" time="0.252" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.CanNotOverWriteBackedUpReferences" type="LibGit2Sharp.Tests.FilterBranchFixture" method="CanNotOverWriteBackedUpReferences" result="Pass" time="0.343" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.HandlesNameRewritingOfChainedTags" type="LibGit2Sharp.Tests.FilterBranchFixture" method="HandlesNameRewritingOfChainedTags" result="Pass" time="0.420" /><test name="LibGit2Sharp.Tests.FilterBranchFixture.CanRewriteSymbolicRefsPointingToTags" type="LibGit2Sharp.Tests.FilterBranchFixture" method="CanRewriteSymbolicRefsPointingToTags" result="Skip"><reason><message>Rewriting of symbolic references is not supported yet</message></reason></test></class><class time="7.028" name="LibGit2Sharp.Tests.RemoveFixture" total="18" passed="18" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.RemoveFixture.RemovingAnUnknownFileThrowsIfExplicitPath(relativePath: &quot;deleted_staged_file.txt&quot;, status: Removed)" type="LibGit2Sharp.Tests.RemoveFixture" method="RemovingAnUnknownFileThrowsIfExplicitPath" result="Pass" time="0.019" /><test name="LibGit2Sharp.Tests.RemoveFixture.RemovingAnUnknownFileThrowsIfExplicitPath(relativePath: &quot;1/I-do-not-exist.txt&quot;, status: Nonexistent)" type="LibGit2Sharp.Tests.RemoveFixture" method="RemovingAnUnknownFileThrowsIfExplicitPath" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.RemoveFixture.CanRemoveAFolderThroughUsageOfPathspecsForFilesAlreadyInTheIndexAndInTheHEAD" type="LibGit2Sharp.Tests.RemoveFixture" method="CanRemoveAFolderThroughUsageOfPathspecsForFilesAlreadyInTheIndexAndInTheHEAD" result="Pass" time="0.617" /><test name="LibGit2Sharp.Tests.RemoveFixture.RemovingFileWithBadParamsThrows" type="LibGit2Sharp.Tests.RemoveFixture" method="RemovingFileWithBadParamsThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.RemoveFixture.RemovingAModifiedFileWhoseChangesHaveBeenPromotedToTheIndexAndWithAdditionalModificationsMadeToItThrows" type="LibGit2Sharp.Tests.RemoveFixture" method="RemovingAModifiedFileWhoseChangesHaveBeenPromotedToTheIndexAndWithAdditionalModificationsMadeToItThrows" result="Pass" time="0.504" /><test name="LibGit2Sharp.Tests.RemoveFixture.CanRemoveAFolderThroughUsageOfPathspecsForNewlyAddedFiles" type="LibGit2Sharp.Tests.RemoveFixture" method="CanRemoveAFolderThroughUsageOfPathspecsForNewlyAddedFiles" result="Pass" time="0.564" /><test name="LibGit2Sharp.Tests.RemoveFixture.CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory(removeFromWorkdir: True, filename: &quot;modified_staged_file.txt&quot;, throws: True, initialStatus: Staged, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: 0)" type="LibGit2Sharp.Tests.RemoveFixture" method="CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory" result="Pass" time="0.874" /><test name="LibGit2Sharp.Tests.RemoveFixture.CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory(removeFromWorkdir: True, filename: &quot;deleted_unstaged_file.txt&quot;, throws: False, initialStatus: Missing, existsBeforeRemove: False, existsAfterRemove: False, lastStatus: Removed)" type="LibGit2Sharp.Tests.RemoveFixture" method="CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory" result="Pass" time="0.542" /><test name="LibGit2Sharp.Tests.RemoveFixture.CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory(removeFromWorkdir: False, filename: &quot;modified_staged_file.txt&quot;, throws: False, initialStatus: Staged, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: Removed, Untracked)" type="LibGit2Sharp.Tests.RemoveFixture" method="CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory" result="Pass" time="0.498" /><test name="LibGit2Sharp.Tests.RemoveFixture.CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory(removeFromWorkdir: False, filename: &quot;1/branch_file.txt&quot;, throws: False, initialStatus: Unaltered, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: Removed, Untracked)" type="LibGit2Sharp.Tests.RemoveFixture" method="CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory" result="Pass" time="0.497" /><test name="LibGit2Sharp.Tests.RemoveFixture.CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory(removeFromWorkdir: True, filename: &quot;1/branch_file.txt&quot;, throws: False, initialStatus: Unaltered, existsBeforeRemove: True, existsAfterRemove: False, lastStatus: Removed)" type="LibGit2Sharp.Tests.RemoveFixture" method="CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory" result="Pass" time="0.488" /><test name="LibGit2Sharp.Tests.RemoveFixture.CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory(removeFromWorkdir: True, filename: &quot;new_tracked_file.txt&quot;, throws: True, initialStatus: Added, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: 0)" type="LibGit2Sharp.Tests.RemoveFixture" method="CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory" result="Pass" time="0.451" /><test name="LibGit2Sharp.Tests.RemoveFixture.CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory(removeFromWorkdir: False, filename: &quot;deleted_unstaged_file.txt&quot;, throws: False, initialStatus: Missing, existsBeforeRemove: False, existsAfterRemove: False, lastStatus: Removed)" type="LibGit2Sharp.Tests.RemoveFixture" method="CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory" result="Pass" time="0.498" /><test name="LibGit2Sharp.Tests.RemoveFixture.CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory(removeFromWorkdir: False, filename: &quot;new_tracked_file.txt&quot;, throws: False, initialStatus: Added, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: Untracked)" type="LibGit2Sharp.Tests.RemoveFixture" method="CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory" result="Pass" time="0.441" /><test name="LibGit2Sharp.Tests.RemoveFixture.CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory(removeFromWorkdir: False, filename: &quot;modified_unstaged_file.txt&quot;, throws: False, initialStatus: Modified, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: Removed, Untracked)" type="LibGit2Sharp.Tests.RemoveFixture" method="CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory" result="Pass" time="0.520" /><test name="LibGit2Sharp.Tests.RemoveFixture.CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory(removeFromWorkdir: True, filename: &quot;modified_unstaged_file.txt&quot;, throws: True, initialStatus: Modified, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: 0)" type="LibGit2Sharp.Tests.RemoveFixture" method="CanRemoveAnUnalteredFileFromTheIndexWithoutRemovingItFromTheWorkingDirectory" result="Pass" time="0.464" /><test name="LibGit2Sharp.Tests.RemoveFixture.RemovingAnUnknownFileWithLaxExplicitPathsValidationDoesntThrow(relativePath: &quot;1/I-do-not-exist.txt&quot;, status: Nonexistent)" type="LibGit2Sharp.Tests.RemoveFixture" method="RemovingAnUnknownFileWithLaxExplicitPathsValidationDoesntThrow" result="Pass" time="0.022" /><test name="LibGit2Sharp.Tests.RemoveFixture.RemovingAnUnknownFileWithLaxExplicitPathsValidationDoesntThrow(relativePath: &quot;deleted_staged_file.txt&quot;, status: Removed)" type="LibGit2Sharp.Tests.RemoveFixture" method="RemovingAnUnknownFileWithLaxExplicitPathsValidationDoesntThrow" result="Pass" time="0.021" /></class><class time="3.612" name="LibGit2Sharp.Tests.RemoteFixture" total="14" passed="14" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.RemoteFixture.CanCheckEqualityOfRemote" type="LibGit2Sharp.Tests.RemoteFixture" method="CanCheckEqualityOfRemote" result="Pass" time="1.014" /><test name="LibGit2Sharp.Tests.RemoteFixture.CanSetTagFetchMode(tagFetchMode: None)" type="LibGit2Sharp.Tests.RemoteFixture" method="CanSetTagFetchMode" result="Pass" time="0.669" /><test name="LibGit2Sharp.Tests.RemoteFixture.CanSetTagFetchMode(tagFetchMode: All)" type="LibGit2Sharp.Tests.RemoteFixture" method="CanSetTagFetchMode" result="Pass" time="0.395" /><test name="LibGit2Sharp.Tests.RemoteFixture.CanSetTagFetchMode(tagFetchMode: Auto)" type="LibGit2Sharp.Tests.RemoteFixture" method="CanSetTagFetchMode" result="Pass" time="0.398" /><test name="LibGit2Sharp.Tests.RemoteFixture.CanEnumerateTheRemotes" type="LibGit2Sharp.Tests.RemoteFixture" method="CanEnumerateTheRemotes" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.RemoteFixture.GettingRemoteThatDoesntExistReturnsNull" type="LibGit2Sharp.Tests.RemoteFixture" method="GettingRemoteThatDoesntExistReturnsNull" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.RemoteFixture.CanGetRemoteOrigin" type="LibGit2Sharp.Tests.RemoteFixture" method="CanGetRemoteOrigin" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.RemoteFixture.CanTellIfARemoteNameIsValid(refname: &quot;/&quot;, expectedResult: False)" type="LibGit2Sharp.Tests.RemoteFixture" method="CanTellIfARemoteNameIsValid" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.RemoteFixture.CanTellIfARemoteNameIsValid(refname: &quot;valid/remote&quot;, expectedResult: True)" type="LibGit2Sharp.Tests.RemoteFixture" method="CanTellIfARemoteNameIsValid" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.RemoteFixture.CanTellIfARemoteNameIsValid(refname: &quot;sher.lock&quot;, expectedResult: False)" type="LibGit2Sharp.Tests.RemoteFixture" method="CanTellIfARemoteNameIsValid" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.RemoteFixture.AddingARemoteWithAnInvalidNameThrows(name: &quot;sher.lock&quot;)" type="LibGit2Sharp.Tests.RemoteFixture" method="AddingARemoteWithAnInvalidNameThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.RemoteFixture.AddingARemoteWithAnInvalidNameThrows(name: &quot;/&quot;)" type="LibGit2Sharp.Tests.RemoteFixture" method="AddingARemoteWithAnInvalidNameThrows" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.RemoteFixture.CreatingANewRemoteAddsADefaultRefSpec" type="LibGit2Sharp.Tests.RemoteFixture" method="CreatingANewRemoteAddsADefaultRefSpec" result="Pass" time="0.465" /><test name="LibGit2Sharp.Tests.RemoteFixture.CanAddANewRemoteWithAFetchRefSpec" type="LibGit2Sharp.Tests.RemoteFixture" method="CanAddANewRemoteWithAFetchRefSpec" result="Pass" time="0.648" /></class><class time="3.438" name="LibGit2Sharp.Tests.PushFixture" total="2" passed="2" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.PushFixture.PushingABranchThatDoesNotTrackAnUpstreamBranchThrows" type="LibGit2Sharp.Tests.PushFixture" method="PushingABranchThatDoesNotTrackAnUpstreamBranchThrows" result="Pass" time="0.898" /><test name="LibGit2Sharp.Tests.PushFixture.CanPushABranchTrackingAnUpstreamBranch" type="LibGit2Sharp.Tests.PushFixture" method="CanPushABranchTrackingAnUpstreamBranch" result="Pass" time="2.540" /></class><class time="0.965" name="LibGit2Sharp.Tests.ReflogFixture" total="5" passed="5" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.ReflogFixture.CommitShouldCreateReflogEntryOnHeadandOnTargetedDirectReference" type="LibGit2Sharp.Tests.ReflogFixture" method="CommitShouldCreateReflogEntryOnHeadandOnTargetedDirectReference" result="Pass" time="0.130" /><test name="LibGit2Sharp.Tests.ReflogFixture.CommitOnDetachedHeadShouldInsertReflogEntry" type="LibGit2Sharp.Tests.ReflogFixture" method="CommitOnDetachedHeadShouldInsertReflogEntry" result="Pass" time="0.659" /><test name="LibGit2Sharp.Tests.ReflogFixture.CommitOnUnbornReferenceShouldCreateReflogEntryWithInitialTag" type="LibGit2Sharp.Tests.ReflogFixture" method="CommitOnUnbornReferenceShouldCreateReflogEntryWithInitialTag" result="Pass" time="0.159" /><test name="LibGit2Sharp.Tests.ReflogFixture.CanReadReflog" type="LibGit2Sharp.Tests.ReflogFixture" method="CanReadReflog" result="Pass" time="0.014" /><test name="LibGit2Sharp.Tests.ReflogFixture.CannotReadReflogOnUnknownReference" type="LibGit2Sharp.Tests.ReflogFixture" method="CannotReadReflogOnUnknownReference" result="Pass" time="0.003" /></class><class time="10.991" name="LibGit2Sharp.Tests.StageFixture" total="29" passed="28" failed="0" skipped="1"><test name="LibGit2Sharp.Tests.StageFixture.StagingFileWithBadParamsThrows" type="LibGit2Sharp.Tests.StageFixture" method="StagingFileWithBadParamsThrows" result="Pass" time="0.014" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageAnUnknownFileWithLaxUnmatchedExplicitPathsValidation(relativePath: &quot;deleted_staged_file.txt&quot;, status: Removed)" type="LibGit2Sharp.Tests.StageFixture" method="CanStageAnUnknownFileWithLaxUnmatchedExplicitPathsValidation" result="Pass" time="0.014" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageAnUnknownFileWithLaxUnmatchedExplicitPathsValidation(relativePath: &quot;1/I-do-not-exist.txt&quot;, status: Nonexistent)" type="LibGit2Sharp.Tests.StageFixture" method="CanStageAnUnknownFileWithLaxUnmatchedExplicitPathsValidation" result="Pass" time="0.008" /><test name="LibGit2Sharp.Tests.StageFixture.StagingAnUnknownFileThrowsIfExplicitPath(relativePath: &quot;1/I-do-not-exist.txt&quot;, status: Nonexistent)" type="LibGit2Sharp.Tests.StageFixture" method="StagingAnUnknownFileThrowsIfExplicitPath" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.StageFixture.StagingAnUnknownFileThrowsIfExplicitPath(relativePath: &quot;deleted_staged_file.txt&quot;, status: Removed)" type="LibGit2Sharp.Tests.StageFixture" method="StagingAnUnknownFileThrowsIfExplicitPath" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageTheUpdationOfAStagedFile" type="LibGit2Sharp.Tests.StageFixture" method="CanStageTheUpdationOfAStagedFile" result="Pass" time="0.415" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageANewFileInAPersistentManner" type="LibGit2Sharp.Tests.StageFixture" method="CanStageANewFileInAPersistentManner" result="Pass" time="0.600" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageWithMultiplePathspecs" type="LibGit2Sharp.Tests.StageFixture" method="CanStageWithMultiplePathspecs" result="Pass" time="0.484" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageTheRemovalOfAStagedFile" type="LibGit2Sharp.Tests.StageFixture" method="CanStageTheRemovalOfAStagedFile" result="Pass" time="0.443" /><test name="LibGit2Sharp.Tests.StageFixture.CanStage(relativePath: &quot;new_untracked_file.txt&quot;, currentStatus: Untracked, doesCurrentlyExistInTheIndex: False, expectedStatusOnceStaged: Added, doesExistInTheIndexOnceStaged: True, expectedIndexCountVariation: 1)" type="LibGit2Sharp.Tests.StageFixture" method="CanStage" result="Pass" time="0.705" /><test name="LibGit2Sharp.Tests.StageFixture.CanStage(relativePath: &quot;modified_unstaged_file.txt&quot;, currentStatus: Modified, doesCurrentlyExistInTheIndex: True, expectedStatusOnceStaged: Staged, doesExistInTheIndexOnceStaged: True, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.StageFixture" method="CanStage" result="Pass" time="0.455" /><test name="LibGit2Sharp.Tests.StageFixture.CanStage(relativePath: &quot;modified_staged_file.txt&quot;, currentStatus: Staged, doesCurrentlyExistInTheIndex: True, expectedStatusOnceStaged: Staged, doesExistInTheIndexOnceStaged: True, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.StageFixture" method="CanStage" result="Pass" time="0.931" /><test name="LibGit2Sharp.Tests.StageFixture.CanStage(relativePath: &quot;new_tracked_file.txt&quot;, currentStatus: Added, doesCurrentlyExistInTheIndex: True, expectedStatusOnceStaged: Added, doesExistInTheIndexOnceStaged: True, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.StageFixture" method="CanStage" result="Pass" time="0.376" /><test name="LibGit2Sharp.Tests.StageFixture.CanStage(relativePath: &quot;1/branch_file.txt&quot;, currentStatus: Unaltered, doesCurrentlyExistInTheIndex: True, expectedStatusOnceStaged: Unaltered, doesExistInTheIndexOnceStaged: True, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.StageFixture" method="CanStage" result="Pass" time="0.452" /><test name="LibGit2Sharp.Tests.StageFixture.CanStage(relativePath: &quot;deleted_unstaged_file.txt&quot;, currentStatus: Missing, doesCurrentlyExistInTheIndex: True, expectedStatusOnceStaged: Removed, doesExistInTheIndexOnceStaged: False, expectedIndexCountVariation: -1)" type="LibGit2Sharp.Tests.StageFixture" method="CanStage" result="Pass" time="0.409" /><test name="LibGit2Sharp.Tests.StageFixture.CanStage(relativePath: &quot;README&quot;, currentStatus: Unaltered, doesCurrentlyExistInTheIndex: True, expectedStatusOnceStaged: Unaltered, doesExistInTheIndexOnceStaged: True, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.StageFixture" method="CanStage" result="Pass" time="0.419" /><test name="LibGit2Sharp.Tests.StageFixture.StagingANewFileWithAFullPathWhichEscapesOutOfTheWorkingDirThrows" type="LibGit2Sharp.Tests.StageFixture" method="StagingANewFileWithAFullPathWhichEscapesOutOfTheWorkingDirThrows" result="Pass" time="0.576" /><test name="LibGit2Sharp.Tests.StageFixture.StagingAnUnknownFileWithLaxExplicitPathsValidationDoesntThrow(relativePath: &quot;1/I-do-not-exist.txt&quot;, status: Nonexistent)" type="LibGit2Sharp.Tests.StageFixture" method="StagingAnUnknownFileWithLaxExplicitPathsValidationDoesntThrow" result="Pass" time="0.010" /><test name="LibGit2Sharp.Tests.StageFixture.StagingAnUnknownFileWithLaxExplicitPathsValidationDoesntThrow(relativePath: &quot;deleted_staged_file.txt&quot;, status: Removed)" type="LibGit2Sharp.Tests.StageFixture" method="StagingAnUnknownFileWithLaxExplicitPathsValidationDoesntThrow" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageANewFileWithAFullPath(ignorecase: True)" type="LibGit2Sharp.Tests.StageFixture" method="CanStageANewFileWithAFullPath" result="Skip"><reason><message>Skipping 'ignorecase = true' test due to ignorecase issue in libgit2.</message></reason></test><test name="LibGit2Sharp.Tests.StageFixture.CanStageANewFileWithAFullPath(ignorecase: False)" type="LibGit2Sharp.Tests.StageFixture" method="CanStageANewFileWithAFullPath" result="Pass" time="0.441" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageWithPathspec(relativePath: &quot;*u*&quot;, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.StageFixture" method="CanStageWithPathspec" result="Pass" time="0.459" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageWithPathspec(relativePath: &quot;*&quot;, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.StageFixture" method="CanStageWithPathspec" result="Pass" time="0.486" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageWithPathspec(relativePath: &quot;new_*file.txt&quot;, expectedIndexCountVariation: 1)" type="LibGit2Sharp.Tests.StageFixture" method="CanStageWithPathspec" result="Pass" time="0.487" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageWithPathspec(relativePath: &quot;1/*&quot;, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.StageFixture" method="CanStageWithPathspec" result="Pass" time="0.554" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageWithPathspec(relativePath: &quot;*modified_unstaged*&quot;, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.StageFixture" method="CanStageWithPathspec" result="Pass" time="0.719" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageWithPathspec(relativePath: &quot;RE*&quot;, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.StageFixture" method="CanStageWithPathspec" result="Pass" time="0.403" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageWithPathspec(relativePath: &quot;d*&quot;, expectedIndexCountVariation: -1)" type="LibGit2Sharp.Tests.StageFixture" method="CanStageWithPathspec" result="Pass" time="0.414" /><test name="LibGit2Sharp.Tests.StageFixture.CanStageANewFileWithARelativePathContainingNativeDirectorySeparatorCharacters" type="LibGit2Sharp.Tests.StageFixture" method="CanStageANewFileWithARelativePathContainingNativeDirectorySeparatorCharacters" result="Pass" time="0.432" /></class><class time="6.453" name="LibGit2Sharp.Tests.StashFixture" total="15" passed="15" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.StashFixture.AddingAStashWithNoMessageGeneratesADefaultOne" type="LibGit2Sharp.Tests.StashFixture" method="AddingAStashWithNoMessageGeneratesADefaultOne" result="Pass" time="0.440" /><test name="LibGit2Sharp.Tests.StashFixture.CanGetStashByIndexer" type="LibGit2Sharp.Tests.StashFixture" method="CanGetStashByIndexer" result="Pass" time="0.654" /><test name="LibGit2Sharp.Tests.StashFixture.CanStashIgnoredFiles" type="LibGit2Sharp.Tests.StashFixture" method="CanStashIgnoredFiles" result="Pass" time="0.553" /><test name="LibGit2Sharp.Tests.StashFixture.RemovingStashWithBadParamShouldThrow(badIndex: -1)" type="LibGit2Sharp.Tests.StashFixture" method="RemovingStashWithBadParamShouldThrow" result="Pass" time="0.454" /><test name="LibGit2Sharp.Tests.StashFixture.RemovingStashWithBadParamShouldThrow(badIndex: -42)" type="LibGit2Sharp.Tests.StashFixture" method="RemovingStashWithBadParamShouldThrow" result="Pass" time="0.442" /><test name="LibGit2Sharp.Tests.StashFixture.GettingAStashThatDoesNotExistReturnsNull(bigIndex: 28)" type="LibGit2Sharp.Tests.StashFixture" method="GettingAStashThatDoesNotExistReturnsNull" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.StashFixture.GettingAStashThatDoesNotExistReturnsNull(bigIndex: 42)" type="LibGit2Sharp.Tests.StashFixture" method="GettingAStashThatDoesNotExistReturnsNull" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.StashFixture.CannotAddStashAgainstBareRepository" type="LibGit2Sharp.Tests.StashFixture" method="CannotAddStashAgainstBareRepository" result="Pass" time="0.402" /><test name="LibGit2Sharp.Tests.StashFixture.GettingStashWithBadIndexThrows(badIndex: -1)" type="LibGit2Sharp.Tests.StashFixture" method="GettingStashWithBadIndexThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.StashFixture.GettingStashWithBadIndexThrows(badIndex: -42)" type="LibGit2Sharp.Tests.StashFixture" method="GettingStashWithBadIndexThrows" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.StashFixture.CanStashAndKeepIndex" type="LibGit2Sharp.Tests.StashFixture" method="CanStashAndKeepIndex" result="Pass" time="0.491" /><test name="LibGit2Sharp.Tests.StashFixture.AddStashWithBadParamsShouldThrows" type="LibGit2Sharp.Tests.StashFixture" method="AddStashWithBadParamsShouldThrows" result="Pass" time="0.479" /><test name="LibGit2Sharp.Tests.StashFixture.CanAddAndRemoveStash" type="LibGit2Sharp.Tests.StashFixture" method="CanAddAndRemoveStash" result="Pass" time="0.928" /><test name="LibGit2Sharp.Tests.StashFixture.CanStashWithoutOptions" type="LibGit2Sharp.Tests.StashFixture" method="CanStashWithoutOptions" result="Pass" time="0.562" /><test name="LibGit2Sharp.Tests.StashFixture.StashingAgainstCleanWorkDirShouldReturnANullStash" type="LibGit2Sharp.Tests.StashFixture" method="StashingAgainstCleanWorkDirShouldReturnANullStash" result="Pass" time="1.043" /></class><class time="7.825" name="LibGit2Sharp.Tests.CloneFixture" total="11" passed="10" failed="0" skipped="1"><test name="LibGit2Sharp.Tests.CloneFixture.WontCheckoutIfAskedNotTo(url: &quot;git://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.CloneFixture" method="WontCheckoutIfAskedNotTo" result="Pass" time="0.894" /><test name="LibGit2Sharp.Tests.CloneFixture.CanCloneALocalRepositoryFromALocalUri" type="LibGit2Sharp.Tests.CloneFixture" method="CanCloneALocalRepositoryFromALocalUri" result="Pass" time="0.329" /><test name="LibGit2Sharp.Tests.CloneFixture.CanCloneWithCredentials" type="LibGit2Sharp.Tests.CloneFixture" method="CanCloneWithCredentials" result="Skip"><reason><message>Populate Constants.PrivateRepo* to run this test</message></reason></test><test name="LibGit2Sharp.Tests.CloneFixture.CanCloneBarely(url: &quot;http://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.CloneFixture" method="CanCloneBarely" result="Pass" time="1.505" /><test name="LibGit2Sharp.Tests.CloneFixture.CanCloneBarely(url: &quot;https://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.CloneFixture" method="CanCloneBarely" result="Pass" time="1.165" /><test name="LibGit2Sharp.Tests.CloneFixture.CanCloneBarely(url: &quot;git://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.CloneFixture" method="CanCloneBarely" result="Pass" time="0.732" /><test name="LibGit2Sharp.Tests.CloneFixture.CanCloneALocalRepositoryFromAStandardPath" type="LibGit2Sharp.Tests.CloneFixture" method="CanCloneALocalRepositoryFromAStandardPath" result="Pass" time="0.263" /><test name="LibGit2Sharp.Tests.CloneFixture.CanClone(url: &quot;https://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.CloneFixture" method="CanClone" result="Pass" time="0.768" /><test name="LibGit2Sharp.Tests.CloneFixture.CanClone(url: &quot;http://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.CloneFixture" method="CanClone" result="Pass" time="0.687" /><test name="LibGit2Sharp.Tests.CloneFixture.CanClone(url: &quot;git://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.CloneFixture" method="CanClone" result="Pass" time="0.735" /><test name="LibGit2Sharp.Tests.CloneFixture.CallsProgressCallbacks(url: &quot;git://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.CloneFixture" method="CallsProgressCallbacks" result="Pass" time="0.715" /></class><class time="3.959" name="LibGit2Sharp.Tests.ConflictFixture" total="23" passed="23" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.ConflictFixture.CanRetrieveAllConflicts" type="LibGit2Sharp.Tests.ConflictFixture" method="CanRetrieveAllConflicts" result="Pass" time="0.035" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanRetrieveSingleConflictByPath(filepath: &quot;ancestor-and-ours.txt&quot;, ancestorId: &quot;5dee68477001f447f50fa7ee7e6a818370b5c2fb&quot;, ourId: &quot;dad0664ae617d36e464ec08ed969ff496432b075&quot;, theirId: null)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanRetrieveSingleConflictByPath" result="Pass" time="0.010" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanRetrieveSingleConflictByPath(filepath: &quot;ancestor-and-theirs.txt&quot;, ancestorId: &quot;3aafd4d0bac33cc3c78c4c070f3966fb6e6f641a&quot;, ourId: null, theirId: &quot;7b26cd5ac0ee68483ae4d5e1e00b064547ea8c9b&quot;)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanRetrieveSingleConflictByPath" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanRetrieveSingleConflictByPath(filepath: &quot;ancestor-only.txt&quot;, ancestorId: &quot;9736f4cd77759672322f3222ed3ddead1412d969&quot;, ourId: null, theirId: null)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanRetrieveSingleConflictByPath" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanRetrieveSingleConflictByPath(filepath: &quot;conflicts-one.txt&quot;, ancestorId: &quot;1f85ca51b8e0aac893a621b61a9c2661d6aa6d81&quot;, ourId: &quot;b7a41c703dc1f33185c76944177f3844ede2ee46&quot;, theirId: &quot;516bd85f78061e09ccc714561d7b504672cb52da&quot;)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanRetrieveSingleConflictByPath" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanRetrieveSingleConflictByPath(filepath: &quot;conflicts-two.txt&quot;, ancestorId: &quot;84af62840be1b1c47b778a8a249f3ff45155038c&quot;, ourId: &quot;ef70c7154145b09c7d08806e55fd0bfb7172576d&quot;, theirId: &quot;220bd62631c8cf7a83ef39c6b94595f00517211e&quot;)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanRetrieveSingleConflictByPath" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanRetrieveSingleConflictByPath(filepath: &quot;ours-and-theirs.txt&quot;, ancestorId: null, ourId: &quot;9aaa9ae562a5f7362425a3fedc4d33ff74fe39e6&quot;, theirId: &quot;0ca3f55d4ac2fa4703c149123b0b31d733112f86&quot;)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanRetrieveSingleConflictByPath" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanRetrieveSingleConflictByPath(filepath: &quot;ours-only.txt&quot;, ancestorId: null, ourId: &quot;9736f4cd77759672322f3222ed3ddead1412d969&quot;, theirId: null)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanRetrieveSingleConflictByPath" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanRetrieveSingleConflictByPath(filepath: &quot;theirs-only.txt&quot;, ancestorId: null, ourId: null, theirId: &quot;9736f4cd77759672322f3222ed3ddead1412d969&quot;)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanRetrieveSingleConflictByPath" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: False, filename: &quot;ancestor-and-ours.txt&quot;, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: Removed, Untracked, removedIndexEntries: 2)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.644" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: True, filename: &quot;ancestor-and-theirs.txt&quot;, existsBeforeRemove: True, existsAfterRemove: False, lastStatus: Nonexistent, removedIndexEntries: 2)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.274" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: False, filename: &quot;theirs-only.txt&quot;, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: Untracked, removedIndexEntries: 1)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.297" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: True, filename: &quot;theirs-only.txt&quot;, existsBeforeRemove: True, existsAfterRemove: False, lastStatus: Nonexistent, removedIndexEntries: 1)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.219" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: True, filename: &quot;conflicts-one.txt&quot;, existsBeforeRemove: True, existsAfterRemove: False, lastStatus: Removed, removedIndexEntries: 3)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.276" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: False, filename: &quot;conflicts-two.txt&quot;, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: Removed, Untracked, removedIndexEntries: 3)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.242" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: False, filename: &quot;ancestor-and-theirs.txt&quot;, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: Untracked, removedIndexEntries: 2)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.242" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: True, filename: &quot;conflicts-two.txt&quot;, existsBeforeRemove: True, existsAfterRemove: False, lastStatus: Removed, removedIndexEntries: 3)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.241" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: False, filename: &quot;ours-only.txt&quot;, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: Removed, Untracked, removedIndexEntries: 1)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.254" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: False, filename: &quot;ours-and-theirs.txt&quot;, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: Removed, Untracked, removedIndexEntries: 2)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.231" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: True, filename: &quot;ours-only.txt&quot;, existsBeforeRemove: True, existsAfterRemove: False, lastStatus: Removed, removedIndexEntries: 1)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.242" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: False, filename: &quot;conflicts-one.txt&quot;, existsBeforeRemove: True, existsAfterRemove: True, lastStatus: Removed, Untracked, removedIndexEntries: 3)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.252" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: True, filename: &quot;ours-and-theirs.txt&quot;, existsBeforeRemove: True, existsAfterRemove: False, lastStatus: Removed, removedIndexEntries: 2)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.253" /><test name="LibGit2Sharp.Tests.ConflictFixture.CanClearConflictsByRemovingFromTheIndex(removeFromWorkdir: True, filename: &quot;ancestor-and-ours.txt&quot;, existsBeforeRemove: True, existsAfterRemove: False, lastStatus: Removed, removedIndexEntries: 2)" type="LibGit2Sharp.Tests.ConflictFixture" method="CanClearConflictsByRemovingFromTheIndex" result="Pass" time="0.240" /></class><class time="33.949" name="LibGit2Sharp.Tests.SubmoduleFixture" total="22" passed="22" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheCommitIdsOfASubmodule(name: &quot;sm_changed_file&quot;, headId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;, indexId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;, workDirId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheCommitIdsOfASubmodule" result="Pass" time="2.544" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheCommitIdsOfASubmodule(name: &quot;sm_changed_head&quot;, headId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;, indexId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;, workDirId: &quot;3d9386c507f6b093471a3e324085657a3c2b4247&quot;)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheCommitIdsOfASubmodule" result="Pass" time="1.428" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheCommitIdsOfASubmodule(name: &quot;sm_changed_index&quot;, headId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;, indexId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;, workDirId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheCommitIdsOfASubmodule" result="Pass" time="1.652" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheCommitIdsOfASubmodule(name: &quot;sm_changed_untracked_file&quot;, headId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;, indexId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;, workDirId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheCommitIdsOfASubmodule" result="Pass" time="1.541" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheCommitIdsOfASubmodule(name: &quot;sm_gitmodules_only&quot;, headId: null, indexId: null, workDirId: null)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheCommitIdsOfASubmodule" result="Pass" time="1.544" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheCommitIdsOfASubmodule(name: &quot;sm_missing_commits&quot;, headId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;, indexId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;, workDirId: &quot;5e4963595a9774b90524d35a807169049de8ccad&quot;)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheCommitIdsOfASubmodule" result="Pass" time="1.506" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheCommitIdsOfASubmodule(name: &quot;sm_added_and_uncommited&quot;, headId: null, indexId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;, workDirId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheCommitIdsOfASubmodule" result="Pass" time="1.620" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheCommitIdsOfASubmodule(name: &quot;sm_unchanged&quot;, headId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;, indexId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;, workDirId: &quot;480095882d281ed676fe5b863569520e54a7d5c0&quot;)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheCommitIdsOfASubmodule" result="Pass" time="1.598" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanStageChangeInSubmoduleViaIndexStage(submodulePath: &quot;sm_changed_head/&quot;)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanStageChangeInSubmoduleViaIndexStage" result="Pass" time="1.537" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanStageChangeInSubmoduleViaIndexStage(submodulePath: &quot;sm_changed_head&quot;)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanStageChangeInSubmoduleViaIndexStage" result="Pass" time="1.531" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheStatusOfASubmodule(name: &quot;sm_missing_commits&quot;, expectedStatus: InHead, InIndex, InConfig, InWorkDir, WorkDirModified)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheStatusOfASubmodule" result="Pass" time="1.462" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheStatusOfASubmodule(name: &quot;sm_changed_head&quot;, expectedStatus: InHead, InIndex, InConfig, InWorkDir, WorkDirModified)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheStatusOfASubmodule" result="Pass" time="1.504" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheStatusOfASubmodule(name: &quot;sm_added_and_uncommited&quot;, expectedStatus: InIndex, InConfig, InWorkDir, IndexAdded)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheStatusOfASubmodule" result="Pass" time="1.418" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheStatusOfASubmodule(name: &quot;sm_changed_file&quot;, expectedStatus: InHead, InIndex, InConfig, InWorkDir, WorkDirFilesModified)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheStatusOfASubmodule" result="Pass" time="1.357" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheStatusOfASubmodule(name: &quot;sm_changed_untracked_file&quot;, expectedStatus: InHead, InIndex, InConfig, InWorkDir, WorkDirFilesUntracked)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheStatusOfASubmodule" result="Pass" time="1.390" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheStatusOfASubmodule(name: &quot;sm_changed_index&quot;, expectedStatus: InHead, InIndex, InConfig, InWorkDir, WorkDirFilesIndexDirty)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheStatusOfASubmodule" result="Pass" time="1.707" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheStatusOfASubmodule(name: &quot;sm_gitmodules_only&quot;, expectedStatus: InConfig)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheStatusOfASubmodule" result="Pass" time="1.464" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanRetrieveTheStatusOfASubmodule(name: &quot;sm_unchanged&quot;, expectedStatus: InHead, InIndex, InConfig, InWorkDir)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanRetrieveTheStatusOfASubmodule" result="Pass" time="1.264" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.RetrievingSubmoduleForNormalDirectoryReturnsNull" type="LibGit2Sharp.Tests.SubmoduleFixture" method="RetrievingSubmoduleForNormalDirectoryReturnsNull" result="Pass" time="1.442" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanStageChangeInSubmoduleViaIndexStageWithOtherPaths(submodulePath: &quot;sm_changed_head&quot;)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanStageChangeInSubmoduleViaIndexStageWithOtherPaths" result="Pass" time="1.614" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanStageChangeInSubmoduleViaIndexStageWithOtherPaths(submodulePath: &quot;sm_changed_head/&quot;)" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanStageChangeInSubmoduleViaIndexStageWithOtherPaths" result="Pass" time="1.315" /><test name="LibGit2Sharp.Tests.SubmoduleFixture.CanEnumerateRepositorySubmodules" type="LibGit2Sharp.Tests.SubmoduleFixture" method="CanEnumerateRepositorySubmodules" result="Pass" time="1.511" /></class><class time="1.357" name="LibGit2Sharp.Tests.IgnoreFixture" total="5" passed="5" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.IgnoreFixture.CallingIsPathIgnoredWithBadParamsThrows" type="LibGit2Sharp.Tests.IgnoreFixture" method="CallingIsPathIgnoredWithBadParamsThrows" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.IgnoreFixture.AddingATemporaryRuleWithBadParamsThrows" type="LibGit2Sharp.Tests.IgnoreFixture" method="AddingATemporaryRuleWithBadParamsThrows" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.IgnoreFixture.CanCheckIfAPathIsIgnoredUsingThePreferedPlatformDirectorySeparatorChar" type="LibGit2Sharp.Tests.IgnoreFixture" method="CanCheckIfAPathIsIgnoredUsingThePreferedPlatformDirectorySeparatorChar" result="Pass" time="0.444" /><test name="LibGit2Sharp.Tests.IgnoreFixture.TemporaryRulesShouldApplyUntilCleared" type="LibGit2Sharp.Tests.IgnoreFixture" method="TemporaryRulesShouldApplyUntilCleared" result="Pass" time="0.496" /><test name="LibGit2Sharp.Tests.IgnoreFixture.IsPathIgnoredShouldVerifyWhetherPathIsIgnored" type="LibGit2Sharp.Tests.IgnoreFixture" method="IsPathIgnoredShouldVerifyWhetherPathIsIgnored" result="Pass" time="0.409" /></class><class time="1.426" name="LibGit2Sharp.Tests.FetchHeadFixture" total="2" passed="2" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.FetchHeadFixture.CanIterateFetchHead(url: &quot;git://github.com/libgit2/TestGitRepository.git&quot;)" type="LibGit2Sharp.Tests.FetchHeadFixture" method="CanIterateFetchHead" result="Pass" time="1.354" /><test name="LibGit2Sharp.Tests.FetchHeadFixture.FetchHeadIsEmptyByDefault" type="LibGit2Sharp.Tests.FetchHeadFixture" method="FetchHeadIsEmptyByDefault" result="Pass" time="0.072" /></class><class time="0.661" name="LibGit2Sharp.Tests.MergeFixture" total="5" passed="5" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.MergeFixture.CommitAgainARepoWithUnmergedEntriesThrows" type="LibGit2Sharp.Tests.MergeFixture" method="CommitAgainARepoWithUnmergedEntriesThrows" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.MergeFixture.AFullyMergedRepoOnlyContainsStagedIndexEntries" type="LibGit2Sharp.Tests.MergeFixture" method="AFullyMergedRepoOnlyContainsStagedIndexEntries" result="Pass" time="0.018" /><test name="LibGit2Sharp.Tests.MergeFixture.CanRetrieveTheBranchBeingMerged" type="LibGit2Sharp.Tests.MergeFixture" method="CanRetrieveTheBranchBeingMerged" result="Pass" time="0.508" /><test name="LibGit2Sharp.Tests.MergeFixture.ANewRepoIsFullyMerged" type="LibGit2Sharp.Tests.MergeFixture" method="ANewRepoIsFullyMerged" result="Pass" time="0.124" /><test name="LibGit2Sharp.Tests.MergeFixture.SoftResetARepoWithUnmergedEntriesThrows" type="LibGit2Sharp.Tests.MergeFixture" method="SoftResetARepoWithUnmergedEntriesThrows" result="Pass" time="0.005" /></class><class time="0.581" name="LibGit2Sharp.Tests.CleanFixture" total="2" passed="2" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.CleanFixture.CannotCleanABareRepository" type="LibGit2Sharp.Tests.CleanFixture" method="CannotCleanABareRepository" result="Pass" time="0.018" /><test name="LibGit2Sharp.Tests.CleanFixture.CanCleanWorkingDirectory" type="LibGit2Sharp.Tests.CleanFixture" method="CanCleanWorkingDirectory" result="Pass" time="0.563" /></class><class time="4.581" name="LibGit2Sharp.Tests.CurrentOperationFixture" total="12" passed="12" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.CurrentOperationFixture.CurrentOperationIsNoneForNewRepo(isBare: False)" type="LibGit2Sharp.Tests.CurrentOperationFixture" method="CurrentOperationIsNoneForNewRepo" result="Pass" time="0.114" /><test name="LibGit2Sharp.Tests.CurrentOperationFixture.CurrentOperationIsNoneForNewRepo(isBare: True)" type="LibGit2Sharp.Tests.CurrentOperationFixture" method="CurrentOperationIsNoneForNewRepo" result="Pass" time="0.116" /><test name="LibGit2Sharp.Tests.CurrentOperationFixture.CurrentOperationHasExpectedPendingOperationValues(stateFile: &quot;rebase-apply/applying&quot;, expectedState: ApplyMailbox)" type="LibGit2Sharp.Tests.CurrentOperationFixture" method="CurrentOperationHasExpectedPendingOperationValues" result="Pass" time="0.510" /><test name="LibGit2Sharp.Tests.CurrentOperationFixture.CurrentOperationHasExpectedPendingOperationValues(stateFile: &quot;rebase-apply/rebasing&quot;, expectedState: Rebase)" type="LibGit2Sharp.Tests.CurrentOperationFixture" method="CurrentOperationHasExpectedPendingOperationValues" result="Pass" time="0.486" /><test name="LibGit2Sharp.Tests.CurrentOperationFixture.CurrentOperationHasExpectedPendingOperationValues(stateFile: &quot;MERGE_HEAD&quot;, expectedState: Merge)" type="LibGit2Sharp.Tests.CurrentOperationFixture" method="CurrentOperationHasExpectedPendingOperationValues" result="Pass" time="0.453" /><test name="LibGit2Sharp.Tests.CurrentOperationFixture.CurrentOperationHasExpectedPendingOperationValues(stateFile: &quot;REVERT_HEAD&quot;, expectedState: Revert)" type="LibGit2Sharp.Tests.CurrentOperationFixture" method="CurrentOperationHasExpectedPendingOperationValues" result="Pass" time="0.421" /><test name="LibGit2Sharp.Tests.CurrentOperationFixture.CurrentOperationHasExpectedPendingOperationValues(stateFile: &quot;rebase-merge/interactive&quot;, expectedState: RebaseInteractive)" type="LibGit2Sharp.Tests.CurrentOperationFixture" method="CurrentOperationHasExpectedPendingOperationValues" result="Pass" time="0.453" /><test name="LibGit2Sharp.Tests.CurrentOperationFixture.CurrentOperationHasExpectedPendingOperationValues(stateFile: &quot;rebase-merge/whatever&quot;, expectedState: RebaseMerge)" type="LibGit2Sharp.Tests.CurrentOperationFixture" method="CurrentOperationHasExpectedPendingOperationValues" result="Pass" time="0.564" /><test name="LibGit2Sharp.Tests.CurrentOperationFixture.CurrentOperationHasExpectedPendingOperationValues(stateFile: &quot;rebase-apply/whatever&quot;, expectedState: ApplyMailboxOrRebase)" type="LibGit2Sharp.Tests.CurrentOperationFixture" method="CurrentOperationHasExpectedPendingOperationValues" result="Pass" time="0.631" /><test name="LibGit2Sharp.Tests.CurrentOperationFixture.CurrentOperationHasExpectedPendingOperationValues(stateFile: &quot;BISECT_LOG&quot;, expectedState: Bisect)" type="LibGit2Sharp.Tests.CurrentOperationFixture" method="CurrentOperationHasExpectedPendingOperationValues" result="Pass" time="0.421" /><test name="LibGit2Sharp.Tests.CurrentOperationFixture.CurrentOperationHasExpectedPendingOperationValues(stateFile: &quot;CHERRY_PICK_HEAD&quot;, expectedState: CherryPick)" type="LibGit2Sharp.Tests.CurrentOperationFixture" method="CurrentOperationHasExpectedPendingOperationValues" result="Pass" time="0.409" /><test name="LibGit2Sharp.Tests.CurrentOperationFixture.CurrentOperationInNoneForABareRepo" type="LibGit2Sharp.Tests.CurrentOperationFixture" method="CurrentOperationInNoneForABareRepo" result="Pass" time="0.003" /></class><class time="0.049" name="LibGit2Sharp.Tests.MetaFixture" total="3" passed="3" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.MetaFixture.EnumsWithFlagsHaveMutuallyExclusiveValues" type="LibGit2Sharp.Tests.MetaFixture" method="EnumsWithFlagsHaveMutuallyExclusiveValues" result="Pass" time="0.033" /><test name="LibGit2Sharp.Tests.MetaFixture.TypesInLibGit2DecoratedWithDebuggerDisplayMustFollowTheStandardImplPattern" type="LibGit2Sharp.Tests.MetaFixture" method="TypesInLibGit2DecoratedWithDebuggerDisplayMustFollowTheStandardImplPattern" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.MetaFixture.TypesInLibGit2SharpMustBeExtensibleInATestingContext" type="LibGit2Sharp.Tests.MetaFixture" method="TypesInLibGit2SharpMustBeExtensibleInATestingContext" result="Pass" time="0.010" /></class><class time="1.480" name="LibGit2Sharp.Tests.MockedRepositoryFixture" total="2" passed="2" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.MockedRepositoryFixture.CanCountCommitsWithMockedRepository" type="LibGit2Sharp.Tests.MockedRepositoryFixture" method="CanCountCommitsWithMockedRepository" result="Pass" time="1.476" /><test name="LibGit2Sharp.Tests.MockedRepositoryFixture.CanCountCommitsWithConcreteRepository" type="LibGit2Sharp.Tests.MockedRepositoryFixture" method="CanCountCommitsWithConcreteRepository" result="Pass" time="0.004" /></class><class time="3.604" name="LibGit2Sharp.Tests.ConfigurationFixture" total="24" passed="24" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanGetGlobalStringValue" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanGetGlobalStringValue" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanGetGlobalStringValueWithoutRepo" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanGetGlobalStringValueWithoutRepo" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanSetAndReadUnicodeStringValue" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanSetAndReadUnicodeStringValue" result="Pass" time="0.540" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanSetGlobalStringValueWithoutRepo" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanSetGlobalStringValueWithoutRepo" result="Pass" time="0.012" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanReadLongValue" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanReadLongValue" result="Pass" time="0.018" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.SettingUnsupportedTypeThrows" type="LibGit2Sharp.Tests.ConfigurationFixture" method="SettingUnsupportedTypeThrows" result="Pass" time="0.019" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanSetGlobalStringValue" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanSetGlobalStringValue" result="Pass" time="0.008" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.ReadingUnsupportedTypeThrows" type="LibGit2Sharp.Tests.ConfigurationFixture" method="ReadingUnsupportedTypeThrows" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanUnsetAnEntryFromTheLocalConfiguration" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanUnsetAnEntryFromTheLocalConfiguration" result="Pass" time="0.425" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanEnumerateGlobalConfig" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanEnumerateGlobalConfig" result="Pass" time="0.008" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanSetBooleanValue" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanSetBooleanValue" result="Pass" time="0.621" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanGetAnEntryFromASpecificStore" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanGetAnEntryFromASpecificStore" result="Pass" time="0.441" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanTellIfASpecificStoreContainsAKey" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanTellIfASpecificStoreContainsAKey" result="Pass" time="0.009" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanSetIntValue" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanSetIntValue" result="Pass" time="0.443" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanReadStringValue" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanReadStringValue" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanReadBooleanValue" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanReadBooleanValue" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanEnumerateLocalConfig" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanEnumerateLocalConfig" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanSetStringValue" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanSetStringValue" result="Pass" time="0.514" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanEnumerateLocalConfigContainingAKeyWithNoValue" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanEnumerateLocalConfigContainingAKeyWithNoValue" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanUnsetAnEntryFromTheGlobalConfiguration" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanUnsetAnEntryFromTheGlobalConfiguration" result="Pass" time="0.067" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.SettingLocalConfigurationOutsideAReposThrows" type="LibGit2Sharp.Tests.ConfigurationFixture" method="SettingLocalConfigurationOutsideAReposThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.ReadingValueThatDoesntExistReturnsNull" type="LibGit2Sharp.Tests.ConfigurationFixture" method="ReadingValueThatDoesntExistReturnsNull" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanReadIntValue" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanReadIntValue" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.ConfigurationFixture.CanSetLongValue" type="LibGit2Sharp.Tests.ConfigurationFixture" method="CanSetLongValue" result="Pass" time="0.441" /></class><class time="0.529" name="LibGit2Sharp.Tests.AttributesFixture" total="1" passed="1" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.AttributesFixture.StagingHonorsTheAttributesFiles" type="LibGit2Sharp.Tests.AttributesFixture" method="StagingHonorsTheAttributesFiles" result="Pass" time="0.529" /></class><class time="0.579" name="LibGit2Sharp.Tests.CommitAncestorFixture" total="8" passed="8" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.CommitAncestorFixture.CannotFindCommonAncestorForSeveralCommmitsWithoutCommonAncestor" type="LibGit2Sharp.Tests.CommitAncestorFixture" method="CannotFindCommonAncestorForSeveralCommmitsWithoutCommonAncestor" result="Pass" time="0.319" /><test name="LibGit2Sharp.Tests.CommitAncestorFixture.FindCommonAncestorForSingleCommitThrows" type="LibGit2Sharp.Tests.CommitAncestorFixture" method="FindCommonAncestorForSingleCommitThrows" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.CommitAncestorFixture.CanFindCommonAncestorForSeveralCommits" type="LibGit2Sharp.Tests.CommitAncestorFixture" method="CanFindCommonAncestorForSeveralCommits" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.CommitAncestorFixture.CanFindCommonAncestorForTwoCommitsAsEnumerable" type="LibGit2Sharp.Tests.CommitAncestorFixture" method="CanFindCommonAncestorForTwoCommitsAsEnumerable" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.CommitAncestorFixture.FindCommonAncestorForEnumerableWithNullCommitThrows" type="LibGit2Sharp.Tests.CommitAncestorFixture" method="FindCommonAncestorForEnumerableWithNullCommitThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.CommitAncestorFixture.FindCommonAncestorForWithNullCommitThrows" type="LibGit2Sharp.Tests.CommitAncestorFixture" method="FindCommonAncestorForWithNullCommitThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.CommitAncestorFixture.CannotFindAncestorForTwoCommmitsWithoutCommonAncestor" type="LibGit2Sharp.Tests.CommitAncestorFixture" method="CannotFindAncestorForTwoCommmitsWithoutCommonAncestor" result="Pass" time="0.241" /><test name="LibGit2Sharp.Tests.CommitAncestorFixture.CanFindCommonAncestorForTwoCommits" type="LibGit2Sharp.Tests.CommitAncestorFixture" method="CanFindCommonAncestorForTwoCommits" result="Pass" time="0.003" /></class><class time="2.157" name="LibGit2Sharp.Tests.NetworkFixture" total="4" passed="4" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.NetworkFixture.CanListRemoteReferenceObjects" type="LibGit2Sharp.Tests.NetworkFixture" method="CanListRemoteReferenceObjects" result="Pass" time="0.995" /><test name="LibGit2Sharp.Tests.NetworkFixture.CanListRemoteReferences(url: &quot;http://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.NetworkFixture" method="CanListRemoteReferences" result="Pass" time="0.330" /><test name="LibGit2Sharp.Tests.NetworkFixture.CanListRemoteReferences(url: &quot;git://github.com/libgit2/TestGitRepository.git&quot;)" type="LibGit2Sharp.Tests.NetworkFixture" method="CanListRemoteReferences" result="Pass" time="0.484" /><test name="LibGit2Sharp.Tests.NetworkFixture.CanListRemoteReferences(url: &quot;https://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.NetworkFixture" method="CanListRemoteReferences" result="Pass" time="0.348" /></class><class time="2.461" name="LibGit2Sharp.Tests.NoteFixture" total="11" passed="11" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.NoteFixture.CanAddANoteOnAGitObject" type="LibGit2Sharp.Tests.NoteFixture" method="CanAddANoteOnAGitObject" result="Pass" time="0.457" /><test name="LibGit2Sharp.Tests.NoteFixture.CanRetrieveNotesFromAGitObject" type="LibGit2Sharp.Tests.NoteFixture" method="CanRetrieveNotesFromAGitObject" result="Pass" time="0.011" /><test name="LibGit2Sharp.Tests.NoteFixture.RemovingANonExistingNoteDoesntThrow" type="LibGit2Sharp.Tests.NoteFixture" method="RemovingANonExistingNoteDoesntThrow" result="Pass" time="0.369" /><test name="LibGit2Sharp.Tests.NoteFixture.CanCompareTwoUniqueNotes" type="LibGit2Sharp.Tests.NoteFixture" method="CanCompareTwoUniqueNotes" result="Pass" time="0.455" /><test name="LibGit2Sharp.Tests.NoteFixture.CanGetListOfNotesNamespaces" type="LibGit2Sharp.Tests.NoteFixture" method="CanGetListOfNotesNamespaces" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.NoteFixture.RetrievingNotesFromANonExistingGitObjectYieldsNoResult" type="LibGit2Sharp.Tests.NoteFixture" method="RetrievingNotesFromANonExistingGitObjectYieldsNoResult" result="Pass" time="0.008" /><test name="LibGit2Sharp.Tests.NoteFixture.CanRetrieveTheListOfNotesForAGivenNamespace" type="LibGit2Sharp.Tests.NoteFixture" method="CanRetrieveTheListOfNotesForAGivenNamespace" result="Pass" time="0.018" /><test name="LibGit2Sharp.Tests.NoteFixture.RetrievingNotesFromAGitObjectWhichHasNoNoteYieldsNoResult" type="LibGit2Sharp.Tests.NoteFixture" method="RetrievingNotesFromAGitObjectWhichHasNoNoteYieldsNoResult" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.NoteFixture.CanAccessNotesFromACommit" type="LibGit2Sharp.Tests.NoteFixture" method="CanAccessNotesFromACommit" result="Pass" time="0.410" /><test name="LibGit2Sharp.Tests.NoteFixture.CreatingANoteWhichAlreadyExistsOverwritesThePreviousNote" type="LibGit2Sharp.Tests.NoteFixture" method="CreatingANoteWhichAlreadyExistsOverwritesThePreviousNote" result="Pass" time="0.405" /><test name="LibGit2Sharp.Tests.NoteFixture.CanRemoveANoteFromAGitObject" type="LibGit2Sharp.Tests.NoteFixture" method="CanRemoveANoteFromAGitObject" result="Pass" time="0.317" /></class><class time="0.566" name="LibGit2Sharp.Tests.DiffBlobToBlobFixture" total="5" passed="5" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.DiffBlobToBlobFixture.CanCompareTwoVersionsOfABlobWithADiffOfTwoHunks" type="LibGit2Sharp.Tests.DiffBlobToBlobFixture" method="CanCompareTwoVersionsOfABlobWithADiffOfTwoHunks" result="Pass" time="0.062" /><test name="LibGit2Sharp.Tests.DiffBlobToBlobFixture.ComparingABlobAgainstItselfReturnsNoDifference" type="LibGit2Sharp.Tests.DiffBlobToBlobFixture" method="ComparingABlobAgainstItselfReturnsNoDifference" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.DiffBlobToBlobFixture.CanCompareATextualBlobAgainstABinaryBlob" type="LibGit2Sharp.Tests.DiffBlobToBlobFixture" method="CanCompareATextualBlobAgainstABinaryBlob" result="Pass" time="0.489" /><test name="LibGit2Sharp.Tests.DiffBlobToBlobFixture.ComparingTwoNullBlobsReturnsAnEmptyContentChanges" type="LibGit2Sharp.Tests.DiffBlobToBlobFixture" method="ComparingTwoNullBlobsReturnsAnEmptyContentChanges" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.DiffBlobToBlobFixture.CanCompareABlobAgainstANullBlob" type="LibGit2Sharp.Tests.DiffBlobToBlobFixture" method="CanCompareABlobAgainstANullBlob" result="Pass" time="0.007" /></class><class time="1.197" name="LibGit2Sharp.Tests.DiffTreeToTargetFixture" total="14" passed="14" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.ComparingATreeInABareRepositoryAgainstTheWorkDirOrTheIndexThrows" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="ComparingATreeInABareRepositoryAgainstTheWorkDirOrTheIndexThrows" result="Pass" time="0.014" /><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.CanCompareANullTreeAgainstTheWorkdirAndTheIndex" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="CanCompareANullTreeAgainstTheWorkdirAndTheIndex" result="Pass" time="0.165" /><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.CanCopeWithEndOfFileNewlineChanges" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="CanCopeWithEndOfFileNewlineChanges" result="Pass" time="0.131" /><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.CanCompareASimpleTreeAgainstTheIndex" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="CanCompareASimpleTreeAgainstTheIndex" result="Pass" time="0.153" /><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.CanCompareASimpleTreeAgainstTheWorkDirAndTheIndex" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="CanCompareASimpleTreeAgainstTheWorkDirAndTheIndex" result="Pass" time="0.131" /><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.CanCompareANullTreeAgainstTheIndex" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="CanCompareANullTreeAgainstTheIndex" result="Pass" time="0.133" /><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.ShowcaseTheDifferenceBetweenTheTwoKindOfComparison" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="ShowcaseTheDifferenceBetweenTheTwoKindOfComparison" result="Pass" time="0.128" /><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.CanCompareASubsetofTheTreeAgainstTheIndexWithLaxExplicitPathsValidationAndANonExistentPath" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="CanCompareASubsetofTheTreeAgainstTheIndexWithLaxExplicitPathsValidationAndANonExistentPath" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.CanCompareAMoreComplexTreeAgainstTheWorkdir" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="CanCompareAMoreComplexTreeAgainstTheWorkdir" result="Pass" time="0.018" /><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.ComparingASubsetofTheTreeAgainstTheIndexWithStrictExplicitPathsValidationAndANonExistentPathThrows" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="ComparingASubsetofTheTreeAgainstTheIndexWithStrictExplicitPathsValidationAndANonExistentPathThrows" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.CanCompareASubsetofTheTreeAgainstTheIndex" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="CanCompareASubsetofTheTreeAgainstTheIndex" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.CanCompareAMoreComplexTreeAgainstTheIndex" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="CanCompareAMoreComplexTreeAgainstTheIndex" result="Pass" time="0.008" /><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.CanCompareANullTreeAgainstTheWorkdir" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="CanCompareANullTreeAgainstTheWorkdir" result="Pass" time="0.154" /><test name="LibGit2Sharp.Tests.DiffTreeToTargetFixture.CanCompareASimpleTreeAgainstTheWorkDir" type="LibGit2Sharp.Tests.DiffTreeToTargetFixture" method="CanCompareASimpleTreeAgainstTheWorkDir" result="Pass" time="0.146" /></class><class time="0.464" name="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture" total="9" passed="9" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture.ComparingTheWorkDirAgainstTheIndexWithStrictUnmatchedExplicitPathsValidationAndANonExistentPathspecThrows(relativePath: &quot;really-i-cant-exist.txt&quot;, currentStatus: Nonexistent)" type="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture" method="ComparingTheWorkDirAgainstTheIndexWithStrictUnmatchedExplicitPathsValidationAndANonExistentPathspecThrows" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture.ComparingTheWorkDirAgainstTheIndexWithStrictUnmatchedExplicitPathsValidationAndANonExistentPathspecThrows(relativePath: &quot;new_untracked_file.txt&quot;, currentStatus: Untracked)" type="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture" method="ComparingTheWorkDirAgainstTheIndexWithStrictUnmatchedExplicitPathsValidationAndANonExistentPathspecThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture.CanCompareTheWorkDirAgainstTheIndex" type="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture" method="CanCompareTheWorkDirAgainstTheIndex" result="Pass" time="0.010" /><test name="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture.CallbackForUnmatchedExplicitPathsIsCalledWhenSet(relativePath: &quot;where-am-I.txt&quot;, currentStatus: Nonexistent)" type="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture" method="CallbackForUnmatchedExplicitPathsIsCalledWhenSet" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture.CallbackForUnmatchedExplicitPathsIsCalledWhenSet(relativePath: &quot;new_untracked_file.txt&quot;, currentStatus: Untracked)" type="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture" method="CallbackForUnmatchedExplicitPathsIsCalledWhenSet" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture.CanCompareTheWorkDirAgainstTheIndexWithUntrackedFiles" type="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture" method="CanCompareTheWorkDirAgainstTheIndexWithUntrackedFiles" result="Pass" time="0.010" /><test name="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture.CanCompareTheWorkDirAgainstTheIndexWithLaxUnmatchedExplicitPathsValidation(relativePath: &quot;new_untracked_file.txt&quot;, currentStatus: Untracked)" type="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture" method="CanCompareTheWorkDirAgainstTheIndexWithLaxUnmatchedExplicitPathsValidation" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture.CanCompareTheWorkDirAgainstTheIndexWithLaxUnmatchedExplicitPathsValidation(relativePath: &quot;really-i-cant-exist.txt&quot;, currentStatus: Nonexistent)" type="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture" method="CanCompareTheWorkDirAgainstTheIndexWithLaxUnmatchedExplicitPathsValidation" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture.ComparingReliesOnProvidedConfigEntriesIfAny" type="LibGit2Sharp.Tests.DiffWorkdirToIndexFixture" method="ComparingReliesOnProvidedConfigEntriesIfAny" result="Pass" time="0.422" /></class><class time="12.296" name="LibGit2Sharp.Tests.ObjectDatabaseFixture" total="34" passed="34" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobFromAStreamWithANumberOfBytesToConsume(contentSize: 7854, numberOfBytesToConsume: 9785)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobFromAStreamWithANumberOfBytesToConsume" result="Pass" time="0.329" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobFromAStreamWithANumberOfBytesToConsume(contentSize: 8192, numberOfBytesToConsume: 4096)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobFromAStreamWithANumberOfBytesToConsume" result="Pass" time="0.321" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobFromAStreamWithANumberOfBytesToConsume(contentSize: 8192, numberOfBytesToConsume: 4095)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobFromAStreamWithANumberOfBytesToConsume" result="Pass" time="0.467" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobFromAStreamWithANumberOfBytesToConsume(contentSize: 7854, numberOfBytesToConsume: 1247)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobFromAStreamWithANumberOfBytesToConsume" result="Pass" time="0.439" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobFromAStreamWithANumberOfBytesToConsume(contentSize: 8192, numberOfBytesToConsume: 4097)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobFromAStreamWithANumberOfBytesToConsume" result="Pass" time="0.252" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobFromAStreamWithANumberOfBytesToConsume(contentSize: 7584, numberOfBytesToConsume: 5879)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobFromAStreamWithANumberOfBytesToConsume" result="Pass" time="0.521" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobFromAStreamWithANumberOfBytesToConsume(contentSize: 16, numberOfBytesToConsume: 32)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobFromAStreamWithANumberOfBytesToConsume" result="Pass" time="0.322" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobFromAStreamWithANumberOfBytesToConsume(contentSize: 34, numberOfBytesToConsume: 8)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobFromAStreamWithANumberOfBytesToConsume" result="Pass" time="0.273" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobFromAFileInTheWorkingDirectory" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobFromAFileInTheWorkingDirectory" result="Pass" time="0.496" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateATreeContainingAGitLinkFromAnUntrackedSubmoduleInTheWorkingDirectory" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateATreeContainingAGitLinkFromAnUntrackedSubmoduleInTheWorkingDirectory" result="Pass" time="1.858" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobIntoTheDatabaseOfABareRepository" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobIntoTheDatabaseOfABareRepository" result="Pass" time="0.316" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateATagAnnotationPointingToAGitObject" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateATagAnnotationPointingToAGitObject" result="Pass" time="0.557" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CreatingABlobFromANonReadableStreamThrows" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CreatingABlobFromANonReadableStreamThrows" result="Pass" time="0.548" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanTellIfObjectsExists(sha: &quot;1385f264afb75a56a5bec74243be9b367ba4ca08&quot;, shouldExists: True)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanTellIfObjectsExists" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanTellIfObjectsExists(sha: &quot;8496071c1b46c854b31185ea97743be6a8774479&quot;, shouldExists: True)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanTellIfObjectsExists" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanTellIfObjectsExists(sha: &quot;ce08fe4884650f067bd5703b6a59a8b3b3c99a09&quot;, shouldExists: False)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanTellIfObjectsExists" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanTellIfObjectsExists(sha: &quot;deadbeefdeadbeefdeadbeefdeadbeefdeadbeef&quot;, shouldExists: False)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanTellIfObjectsExists" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanReplaceAnExistingTreeWithAnotherPersitedTree" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanReplaceAnExistingTreeWithAnotherPersitedTree" result="Pass" time="0.316" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CannotCreateATreeContainingABlobFromARelativePathAgainstABareRepository" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CannotCreateATreeContainingABlobFromARelativePathAgainstABareRepository" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateATreeByAlteringAnExistingOne(targetPath: &quot;2/README AS WELL&quot;)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateATreeByAlteringAnExistingOne" result="Pass" time="0.373" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateATreeByAlteringAnExistingOne(targetPath: &quot;README AS WELL&quot;)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateATreeByAlteringAnExistingOne" result="Pass" time="0.635" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateATreeByAlteringAnExistingOne(targetPath: &quot;README&quot;)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateATreeByAlteringAnExistingOne" result="Pass" time="0.276" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateATreeByAlteringAnExistingOne(targetPath: &quot;1&quot;)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateATreeByAlteringAnExistingOne" result="Pass" time="0.264" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateATreeByAlteringAnExistingOne(targetPath: &quot;1/README AS WELL&quot;)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateATreeByAlteringAnExistingOne" result="Pass" time="0.320" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateATreeByRemovingEntriesFromExistingOne" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateATreeByRemovingEntriesFromExistingOne" result="Pass" time="0.308" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateACommit" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateACommit" result="Pass" time="0.343" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateAnEmptyTree" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateAnEmptyTree" result="Pass" time="0.274" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.RemovingANonExistingEntryFromATreeDefinitionHasNoSideEffect" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="RemovingANonExistingEntryFromATreeDefinitionHasNoSideEffect" result="Pass" time="0.320" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABinaryBlobFromAStream" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABinaryBlobFromAStream" result="Pass" time="0.331" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobFromAStream(expectedSha: &quot;e9671e138a780833cb689753570fd10a55be84fb&quot;, hintPath: &quot;dummy.guess&quot;)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobFromAStream" result="Pass" time="0.387" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobFromAStream(expectedSha: &quot;e9671e138a780833cb689753570fd10a55be84fb&quot;, hintPath: &quot;dummy.txt&quot;)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobFromAStream" result="Pass" time="0.284" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobFromAStream(expectedSha: &quot;321cbdf08803c744082332332838df6bd160f8f9&quot;, hintPath: null)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobFromAStream" result="Pass" time="0.309" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateABlobFromAStream(expectedSha: &quot;321cbdf08803c744082332332838df6bd160f8f9&quot;, hintPath: &quot;dummy.data&quot;)" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateABlobFromAStream" result="Pass" time="0.298" /><test name="LibGit2Sharp.Tests.ObjectDatabaseFixture.CanCreateATreeContainingABlobFromAFileInTheWorkingDirectory" type="LibGit2Sharp.Tests.ObjectDatabaseFixture" method="CanCreateATreeContainingABlobFromAFileInTheWorkingDirectory" result="Pass" time="0.544" /></class><class time="0.157" name="LibGit2Sharp.Tests.OdbBackendFixture" total="1" passed="1" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.OdbBackendFixture.SimpleOdbBackendFixtureTest" type="LibGit2Sharp.Tests.OdbBackendFixture" method="SimpleOdbBackendFixtureTest" result="Pass" time="0.157" /></class><class time="1.153" name="LibGit2Sharp.Tests.DiffTreeToTreeFixture" total="28" passed="27" failed="0" skipped="1"><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.RetrievingANonExistentFileChangeReturnsNull" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="RetrievingANonExistentFileChangeReturnsNull" result="Pass" time="0.012" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks(contextLines: 0, interhunkLines: 4)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks" result="Pass" time="0.026" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks(contextLines: 1, interhunkLines: 2)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks" result="Pass" time="0.026" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks(contextLines: 2, interhunkLines: 4)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks" result="Pass" time="0.029" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks(contextLines: 2, interhunkLines: 5)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks" result="Pass" time="0.011" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks(contextLines: 0, interhunkLines: 3)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks" result="Pass" time="0.019" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks(contextLines: 3, interhunkLines: 3)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks" result="Pass" time="0.008" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks(contextLines: 1, interhunkLines: 1)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks" result="Pass" time="0.009" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks(contextLines: 4, interhunkLines: 0)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks" result="Pass" time="0.014" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks(contextLines: 3, interhunkLines: 2)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks" result="Pass" time="0.010" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks(contextLines: 4, interhunkLines: 1)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithADiffOfTwoHunks" result="Pass" time="0.008" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.ComparingReliesOnProvidedConfigEntriesIfAny" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="ComparingReliesOnProvidedConfigEntriesIfAny" result="Pass" time="0.556" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareASubsetofTheTreeAgainstOneOfItsAncestor" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareASubsetofTheTreeAgainstOneOfItsAncestor" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareATreeAgainstANullTree" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareATreeAgainstANullTree" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.RetrievingDiffChangesMustAlwaysBeCaseSensitive" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="RetrievingDiffChangesMustAlwaysBeCaseSensitive" result="Pass" time="0.246" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanHandleTwoTreeEntryChangesWithTheSamePath" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanHandleTwoTreeEntryChangesWithTheSamePath" result="Pass" time="0.109" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareACommitTreeAgainstItsParent" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareACommitTreeAgainstItsParent" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.ComparingTwoNullTreesReturnsAnEmptyTreeChanges" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="ComparingTwoNullTreesReturnsAnEmptyTreeChanges" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithATrailingNewlineDeletion(contextLines: 1, expectedPatchLength: 191)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithATrailingNewlineDeletion" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithATrailingNewlineDeletion(contextLines: 3, expectedPatchLength: 187)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithATrailingNewlineDeletion" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithATrailingNewlineDeletion(contextLines: 4, expectedPatchLength: 193)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithATrailingNewlineDeletion" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithATrailingNewlineDeletion(contextLines: 2, expectedPatchLength: 184)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithATrailingNewlineDeletion" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareTwoVersionsOfAFileWithATrailingNewlineDeletion(contextLines: 0, expectedPatchLength: 175)" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareTwoVersionsOfAFileWithATrailingNewlineDeletion" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.ComparingATreeAgainstItselfReturnsNoDifference" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="ComparingATreeAgainstItselfReturnsNoDifference" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareATreeAgainstAnotherTreeWithLaxExplicitPathsValidationAndNonExistentPath" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareATreeAgainstAnotherTreeWithLaxExplicitPathsValidationAndNonExistentPath" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanDetectTheRenamingOfAModifiedFile" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanDetectTheRenamingOfAModifiedFile" result="Skip"><reason><message>Not implemented in libgit2 yet.</message></reason></test><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.CanCompareACommitTreeAgainstATreeWithNoCommonAncestor" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="CanCompareACommitTreeAgainstATreeWithNoCommonAncestor" result="Pass" time="0.017" /><test name="LibGit2Sharp.Tests.DiffTreeToTreeFixture.ComparingATreeAgainstAnotherTreeWithStrictExplicitPathsValidationThrows" type="LibGit2Sharp.Tests.DiffTreeToTreeFixture" method="ComparingATreeAgainstAnotherTreeWithStrictExplicitPathsValidationThrows" result="Pass" time="0.004" /></class><class time="2.393" name="LibGit2Sharp.Tests.RepositoryOptionsFixture" total="7" passed="7" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.RepositoryOptionsFixture.OpeningABareRepoWithoutProvidingBothWorkDirAndIndexThrows" type="LibGit2Sharp.Tests.RepositoryOptionsFixture" method="OpeningABareRepoWithoutProvidingBothWorkDirAndIndexThrows" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.RepositoryOptionsFixture.CanProvideADifferentIndexToAStandardRepo" type="LibGit2Sharp.Tests.RepositoryOptionsFixture" method="CanProvideADifferentIndexToAStandardRepo" result="Pass" time="0.876" /><test name="LibGit2Sharp.Tests.RepositoryOptionsFixture.CanSneakAdditionalCommitsIntoAStandardRepoWithoutAlteringTheWorkdirOrTheIndex" type="LibGit2Sharp.Tests.RepositoryOptionsFixture" method="CanSneakAdditionalCommitsIntoAStandardRepoWithoutAlteringTheWorkdirOrTheIndex" result="Pass" time="0.654" /><test name="LibGit2Sharp.Tests.RepositoryOptionsFixture.CanProvideDifferentConfigurationFilesToARepository" type="LibGit2Sharp.Tests.RepositoryOptionsFixture" method="CanProvideDifferentConfigurationFilesToARepository" result="Pass" time="0.037" /><test name="LibGit2Sharp.Tests.RepositoryOptionsFixture.CanProvideADifferentWorkDirToAStandardRepo" type="LibGit2Sharp.Tests.RepositoryOptionsFixture" method="CanProvideADifferentWorkDirToAStandardRepo" result="Pass" time="0.803" /><test name="LibGit2Sharp.Tests.RepositoryOptionsFixture.CanOpenABareRepoAsIfItWasAStandardOne" type="LibGit2Sharp.Tests.RepositoryOptionsFixture" method="CanOpenABareRepoAsIfItWasAStandardOne" result="Pass" time="0.011" /><test name="LibGit2Sharp.Tests.RepositoryOptionsFixture.CanOpenABareRepoAsIfItWasAStandardOneWithANonExisitingIndexFile" type="LibGit2Sharp.Tests.RepositoryOptionsFixture" method="CanOpenABareRepoAsIfItWasAStandardOneWithANonExisitingIndexFile" result="Pass" time="0.006" /></class><class time="2.262" name="LibGit2Sharp.Tests.ResetHeadFixture" total="12" passed="12" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.ResetHeadFixture.ResetANewlyInitializedRepositoryThrows(isBare: True)" type="LibGit2Sharp.Tests.ResetHeadFixture" method="ResetANewlyInitializedRepositoryThrows" result="Pass" time="0.053" /><test name="LibGit2Sharp.Tests.ResetHeadFixture.ResetANewlyInitializedRepositoryThrows(isBare: False)" type="LibGit2Sharp.Tests.ResetHeadFixture" method="ResetANewlyInitializedRepositoryThrows" result="Pass" time="0.053" /><test name="LibGit2Sharp.Tests.ResetHeadFixture.HardResetInABareRepositoryThrows" type="LibGit2Sharp.Tests.ResetHeadFixture" method="HardResetInABareRepositoryThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.ResetHeadFixture.SoftResetSetsTheHeadToTheDereferencedCommitOfAChainedTag" type="LibGit2Sharp.Tests.ResetHeadFixture" method="SoftResetSetsTheHeadToTheDereferencedCommitOfAChainedTag" result="Pass" time="0.416" /><test name="LibGit2Sharp.Tests.ResetHeadFixture.MixedResetRefreshesTheIndex" type="LibGit2Sharp.Tests.ResetHeadFixture" method="MixedResetRefreshesTheIndex" result="Pass" time="0.240" /><test name="LibGit2Sharp.Tests.ResetHeadFixture.SoftResetSetsTheDetachedHeadToTheSpecifiedCommit" type="LibGit2Sharp.Tests.ResetHeadFixture" method="SoftResetSetsTheDetachedHeadToTheSpecifiedCommit" result="Pass" time="0.200" /><test name="LibGit2Sharp.Tests.ResetHeadFixture.MixedResetInABareRepositoryThrows" type="LibGit2Sharp.Tests.ResetHeadFixture" method="MixedResetInABareRepositoryThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.ResetHeadFixture.SoftResetToAParentCommitChangesTheTargetOfTheHead" type="LibGit2Sharp.Tests.ResetHeadFixture" method="SoftResetToAParentCommitChangesTheTargetOfTheHead" result="Pass" time="0.293" /><test name="LibGit2Sharp.Tests.ResetHeadFixture.ResettingWithBadParamsThrows" type="LibGit2Sharp.Tests.ResetHeadFixture" method="ResettingWithBadParamsThrows" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.ResetHeadFixture.SoftResetSetsTheHeadToTheSpecifiedCommit" type="LibGit2Sharp.Tests.ResetHeadFixture" method="SoftResetSetsTheHeadToTheSpecifiedCommit" result="Pass" time="0.178" /><test name="LibGit2Sharp.Tests.ResetHeadFixture.SoftResetToTheHeadOfARepositoryDoesNotChangeTheTargetOfTheHead" type="LibGit2Sharp.Tests.ResetHeadFixture" method="SoftResetToTheHeadOfARepositoryDoesNotChangeTheTargetOfTheHead" result="Pass" time="0.324" /><test name="LibGit2Sharp.Tests.ResetHeadFixture.HardResetUpdatesTheContentOfTheWorkingDirectory" type="LibGit2Sharp.Tests.ResetHeadFixture" method="HardResetUpdatesTheContentOfTheWorkingDirectory" result="Pass" time="0.493" /></class><class time="0.003" name="LibGit2Sharp.Tests.LazyFixture" total="3" passed="3" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.LazyFixture.IsLazilyEvaluated" type="LibGit2Sharp.Tests.LazyFixture" method="IsLazilyEvaluated" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.LazyFixture.IsEvaluatedOnlyOnce" type="LibGit2Sharp.Tests.LazyFixture" method="IsEvaluatedOnlyOnce" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.LazyFixture.CanReturnTheValue" type="LibGit2Sharp.Tests.LazyFixture" method="CanReturnTheValue" result="Pass" time="0.001" /></class><class time="6.791" name="LibGit2Sharp.Tests.FetchFixture" total="10" passed="9" failed="0" skipped="1"><test name="LibGit2Sharp.Tests.FetchFixture.FetchRespectsConfiguredAutoTagSetting(tagFetchMode: Auto, expectedTagCount: 3)" type="LibGit2Sharp.Tests.FetchFixture" method="FetchRespectsConfiguredAutoTagSetting" result="Pass" time="1.304" /><test name="LibGit2Sharp.Tests.FetchFixture.FetchRespectsConfiguredAutoTagSetting(tagFetchMode: All, expectedTagCount: 4)" type="LibGit2Sharp.Tests.FetchFixture" method="FetchRespectsConfiguredAutoTagSetting" result="Pass" time="0.753" /><test name="LibGit2Sharp.Tests.FetchFixture.FetchRespectsConfiguredAutoTagSetting(tagFetchMode: None, expectedTagCount: 0)" type="LibGit2Sharp.Tests.FetchFixture" method="FetchRespectsConfiguredAutoTagSetting" result="Pass" time="0.603" /><test name="LibGit2Sharp.Tests.FetchFixture.CanFetchIntoAnEmptyRepository(url: &quot;http://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.FetchFixture" method="CanFetchIntoAnEmptyRepository" result="Pass" time="0.806" /><test name="LibGit2Sharp.Tests.FetchFixture.CanFetchIntoAnEmptyRepository(url: &quot;git://github.com/libgit2/TestGitRepository.git&quot;)" type="LibGit2Sharp.Tests.FetchFixture" method="CanFetchIntoAnEmptyRepository" result="Pass" time="0.725" /><test name="LibGit2Sharp.Tests.FetchFixture.CanFetchIntoAnEmptyRepository(url: &quot;https://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.FetchFixture" method="CanFetchIntoAnEmptyRepository" result="Pass" time="0.688" /><test name="LibGit2Sharp.Tests.FetchFixture.CanFetchIntoAnEmptyRepositoryWithCredentials" type="LibGit2Sharp.Tests.FetchFixture" method="CanFetchIntoAnEmptyRepositoryWithCredentials" result="Skip"><reason><message>Populate Constants.PrivateRepo* to run this test</message></reason></test><test name="LibGit2Sharp.Tests.FetchFixture.CanFetchAllTagsIntoAnEmptyRepository(url: &quot;https://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.FetchFixture" method="CanFetchAllTagsIntoAnEmptyRepository" result="Pass" time="0.639" /><test name="LibGit2Sharp.Tests.FetchFixture.CanFetchAllTagsIntoAnEmptyRepository(url: &quot;git://github.com/libgit2/TestGitRepository.git&quot;)" type="LibGit2Sharp.Tests.FetchFixture" method="CanFetchAllTagsIntoAnEmptyRepository" result="Pass" time="0.644" /><test name="LibGit2Sharp.Tests.FetchFixture.CanFetchAllTagsIntoAnEmptyRepository(url: &quot;http://github.com/libgit2/TestGitRepository&quot;)" type="LibGit2Sharp.Tests.FetchFixture" method="CanFetchAllTagsIntoAnEmptyRepository" result="Pass" time="0.606" /></class><class time="3.901" name="LibGit2Sharp.Tests.ResetIndexFixture" total="9" passed="9" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.ResetIndexFixture.ResetANewlyInitializedNonBareRepositoryThrows" type="LibGit2Sharp.Tests.ResetIndexFixture" method="ResetANewlyInitializedNonBareRepositoryThrows" result="Pass" time="0.066" /><test name="LibGit2Sharp.Tests.ResetIndexFixture.ResetTheIndexWithTheHeadUnstagesEverything" type="LibGit2Sharp.Tests.ResetIndexFixture" method="ResetTheIndexWithTheHeadUnstagesEverything" result="Pass" time="0.751" /><test name="LibGit2Sharp.Tests.ResetIndexFixture.CanResetTheIndexToTheContentOfACommitWithCommitAsArgument" type="LibGit2Sharp.Tests.ResetIndexFixture" method="CanResetTheIndexToTheContentOfACommitWithCommitAsArgument" result="Pass" time="0.554" /><test name="LibGit2Sharp.Tests.ResetIndexFixture.CanResetTheIndexToTheContentOfACommitWithCommitishAsArgument" type="LibGit2Sharp.Tests.ResetIndexFixture" method="CanResetTheIndexToTheContentOfACommitWithCommitishAsArgument" result="Pass" time="0.653" /><test name="LibGit2Sharp.Tests.ResetIndexFixture.CanResetTheIndexToASubsetOfTheContentOfACommitWithCommitishAsArgument" type="LibGit2Sharp.Tests.ResetIndexFixture" method="CanResetTheIndexToASubsetOfTheContentOfACommitWithCommitishAsArgument" result="Pass" time="0.451" /><test name="LibGit2Sharp.Tests.ResetIndexFixture.ResetANewlyInitializedBareRepositoryThrows" type="LibGit2Sharp.Tests.ResetIndexFixture" method="ResetANewlyInitializedBareRepositoryThrows" result="Pass" time="0.064" /><test name="LibGit2Sharp.Tests.ResetIndexFixture.ResettingTheIndexToASubsetOfTheContentOfACommitWithCommitAsArgumentAndStrictUnmatchedPathspecsValidationThrows" type="LibGit2Sharp.Tests.ResetIndexFixture" method="ResettingTheIndexToASubsetOfTheContentOfACommitWithCommitAsArgumentAndStrictUnmatchedPathspecsValidationThrows" result="Pass" time="0.598" /><test name="LibGit2Sharp.Tests.ResetIndexFixture.ResettingInABareRepositoryThrows" type="LibGit2Sharp.Tests.ResetIndexFixture" method="ResettingInABareRepositoryThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.ResetIndexFixture.CanResetTheIndexToASubsetOfTheContentOfACommitWithCommitAsArgumentAndLaxUnmatchedExplicitPathsValidation" type="LibGit2Sharp.Tests.ResetIndexFixture" method="CanResetTheIndexToASubsetOfTheContentOfACommitWithCommitAsArgumentAndLaxUnmatchedExplicitPathsValidation" result="Pass" time="0.761" /></class><class time="2.423" name="LibGit2Sharp.Tests.StatusFixture" total="11" passed="11" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.StatusFixture.RetrievingTheStatusOfTheRepositoryHonorsTheGitIgnoreDirectives" type="LibGit2Sharp.Tests.StatusFixture" method="RetrievingTheStatusOfTheRepositoryHonorsTheGitIgnoreDirectives" result="Pass" time="0.714" /><test name="LibGit2Sharp.Tests.StatusFixture.RetrievingTheStatusOfAFilePathHonorsTheIgnoreCaseConfigurationSetting(shouldIgnoreCase: True, expectedlowerCasedFileStatus: Unaltered, expectedCamelCasedFileStatus: Unaltered)" type="LibGit2Sharp.Tests.StatusFixture" method="RetrievingTheStatusOfAFilePathHonorsTheIgnoreCaseConfigurationSetting" result="Pass" time="0.131" /><test name="LibGit2Sharp.Tests.StatusFixture.RetrievingTheStatusOfAFilePathHonorsTheIgnoreCaseConfigurationSetting(shouldIgnoreCase: False, expectedlowerCasedFileStatus: Missing, expectedCamelCasedFileStatus: Untracked)" type="LibGit2Sharp.Tests.StatusFixture" method="RetrievingTheStatusOfAFilePathHonorsTheIgnoreCaseConfigurationSetting" result="Pass" time="0.109" /><test name="LibGit2Sharp.Tests.StatusFixture.RetrievingTheStatusOfADirectoryThrows" type="LibGit2Sharp.Tests.StatusFixture" method="RetrievingTheStatusOfADirectoryThrows" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.StatusFixture.CanRetrieveTheStatusOfTheWholeWorkingDirectory" type="LibGit2Sharp.Tests.StatusFixture" method="CanRetrieveTheStatusOfTheWholeWorkingDirectory" result="Pass" time="0.391" /><test name="LibGit2Sharp.Tests.StatusFixture.RetrievingTheStatusOfAnAmbiguousFileThrows" type="LibGit2Sharp.Tests.StatusFixture" method="RetrievingTheStatusOfAnAmbiguousFileThrows" result="Pass" time="0.409" /><test name="LibGit2Sharp.Tests.StatusFixture.RetrievingTheStatusOfAnEmptyRepositoryHonorsTheGitIgnoreDirectives" type="LibGit2Sharp.Tests.StatusFixture" method="RetrievingTheStatusOfAnEmptyRepositoryHonorsTheGitIgnoreDirectives" result="Pass" time="0.065" /><test name="LibGit2Sharp.Tests.StatusFixture.RetrievingTheStatusOfARepositoryReturnNativeFilePaths" type="LibGit2Sharp.Tests.StatusFixture" method="RetrievingTheStatusOfARepositoryReturnNativeFilePaths" result="Pass" time="0.080" /><test name="LibGit2Sharp.Tests.StatusFixture.CanRetrieveTheStatusOfAFile" type="LibGit2Sharp.Tests.StatusFixture" method="CanRetrieveTheStatusOfAFile" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.StatusFixture.RetrievingTheStatusOfTheRepositoryHonorsTheGitIgnoreDirectivesThroughoutDirectories" type="LibGit2Sharp.Tests.StatusFixture" method="RetrievingTheStatusOfTheRepositoryHonorsTheGitIgnoreDirectivesThroughoutDirectories" result="Pass" time="0.454" /><test name="LibGit2Sharp.Tests.StatusFixture.CanRetrieveTheStatusOfANewRepository" type="LibGit2Sharp.Tests.StatusFixture" method="CanRetrieveTheStatusOfANewRepository" result="Pass" time="0.062" /></class><class time="0.164" name="LibGit2Sharp.Tests.BlobFixture" total="7" passed="7" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.BlobFixture.CanReadBlobStream" type="LibGit2Sharp.Tests.BlobFixture" method="CanReadBlobStream" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.BlobFixture.CanStageAFileGeneratedFromABlobContentStream" type="LibGit2Sharp.Tests.BlobFixture" method="CanStageAFileGeneratedFromABlobContentStream" result="Pass" time="0.144" /><test name="LibGit2Sharp.Tests.BlobFixture.CanLookUpBlob" type="LibGit2Sharp.Tests.BlobFixture" method="CanLookUpBlob" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.BlobFixture.CanGetBlobAsUtf8" type="LibGit2Sharp.Tests.BlobFixture" method="CanGetBlobAsUtf8" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.BlobFixture.CanReadBlobContent" type="LibGit2Sharp.Tests.BlobFixture" method="CanReadBlobContent" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.BlobFixture.CanGetBlobSize" type="LibGit2Sharp.Tests.BlobFixture" method="CanGetBlobSize" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.BlobFixture.CanTellIfTheBlobContentLooksLikeBinary" type="LibGit2Sharp.Tests.BlobFixture" method="CanTellIfTheBlobContentLooksLikeBinary" result="Pass" time="0.003" /></class><class time="12.153" name="LibGit2Sharp.Tests.BranchFixture" total="52" passed="52" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.BranchFixture.RemoteAndUpstreamBranchCanonicalNameForNonTrackingBranchIsNull" type="LibGit2Sharp.Tests.BranchFixture" method="RemoteAndUpstreamBranchCanonicalNameForNonTrackingBranchIsNull" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.BranchFixture.CanUnsetTrackedBranch" type="LibGit2Sharp.Tests.BranchFixture" method="CanUnsetTrackedBranch" result="Pass" time="0.453" /><test name="LibGit2Sharp.Tests.BranchFixture.CreatingBranchWithBadParamsThrows" type="LibGit2Sharp.Tests.BranchFixture" method="CreatingBranchWithBadParamsThrows" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.BranchFixture.RemoteBranchesDoNotTrackAnything" type="LibGit2Sharp.Tests.BranchFixture" method="RemoteBranchesDoNotTrackAnything" result="Pass" time="0.014" /><test name="LibGit2Sharp.Tests.BranchFixture.CanCreateBranchFromImplicitHead" type="LibGit2Sharp.Tests.BranchFixture" method="CanCreateBranchFromImplicitHead" result="Pass" time="0.340" /><test name="LibGit2Sharp.Tests.BranchFixture.MovingARemoteTrackingBranchThrows" type="LibGit2Sharp.Tests.BranchFixture" method="MovingARemoteTrackingBranchThrows" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.BranchFixture.CanMoveABranchWhileOverwritingAnExistingOne" type="LibGit2Sharp.Tests.BranchFixture" method="CanMoveABranchWhileOverwritingAnExistingOne" result="Pass" time="0.322" /><test name="LibGit2Sharp.Tests.BranchFixture.CreatingBranchWithUnknownNamedTargetThrows" type="LibGit2Sharp.Tests.BranchFixture" method="CreatingBranchWithUnknownNamedTargetThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.BranchFixture.CanResolveRemote" type="LibGit2Sharp.Tests.BranchFixture" method="CanResolveRemote" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.BranchFixture.CanRemoveAnExistingBranch(branchName: &quot;origin/br2&quot;)" type="LibGit2Sharp.Tests.BranchFixture" method="CanRemoveAnExistingBranch" result="Pass" time="0.507" /><test name="LibGit2Sharp.Tests.BranchFixture.CanRemoveAnExistingBranch(branchName: &quot;i-do-numbers&quot;)" type="LibGit2Sharp.Tests.BranchFixture" method="CanRemoveAnExistingBranch" result="Pass" time="0.509" /><test name="LibGit2Sharp.Tests.BranchFixture.CanSetLocalTrackedBranch" type="LibGit2Sharp.Tests.BranchFixture" method="CanSetLocalTrackedBranch" result="Pass" time="0.632" /><test name="LibGit2Sharp.Tests.BranchFixture.OnlyOneBranchIsTheHead" type="LibGit2Sharp.Tests.BranchFixture" method="OnlyOneBranchIsTheHead" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.BranchFixture.CanWalkCommitsFromBranch" type="LibGit2Sharp.Tests.BranchFixture" method="CanWalkCommitsFromBranch" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.BranchFixture.QueryRemoteForLocalTrackingBranch" type="LibGit2Sharp.Tests.BranchFixture" method="QueryRemoteForLocalTrackingBranch" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.BranchFixture.CanRemoveAnExistingNamedBranch(branchName: &quot;origin/br2&quot;, isRemote: True)" type="LibGit2Sharp.Tests.BranchFixture" method="CanRemoveAnExistingNamedBranch" result="Pass" time="0.745" /><test name="LibGit2Sharp.Tests.BranchFixture.CanRemoveAnExistingNamedBranch(branchName: &quot;i-do-numbers&quot;, isRemote: False)" type="LibGit2Sharp.Tests.BranchFixture" method="CanRemoveAnExistingNamedBranch" result="Pass" time="0.476" /><test name="LibGit2Sharp.Tests.BranchFixture.LookingOutABranchByNameWithBadParamsThrows" type="LibGit2Sharp.Tests.BranchFixture" method="LookingOutABranchByNameWithBadParamsThrows" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.BranchFixture.CanSetTrackedBranch" type="LibGit2Sharp.Tests.BranchFixture" method="CanSetTrackedBranch" result="Pass" time="0.479" /><test name="LibGit2Sharp.Tests.BranchFixture.CanCreateBranchFromCommit" type="LibGit2Sharp.Tests.BranchFixture" method="CanCreateBranchFromCommit" result="Pass" time="0.342" /><test name="LibGit2Sharp.Tests.BranchFixture.CanCreateBranch(name: &quot;Ångström&quot;)" type="LibGit2Sharp.Tests.BranchFixture" method="CanCreateBranch" result="Pass" time="0.466" /><test name="LibGit2Sharp.Tests.BranchFixture.CanCreateBranch(name: &quot;unit_test&quot;)" type="LibGit2Sharp.Tests.BranchFixture" method="CanCreateBranch" result="Pass" time="0.357" /><test name="LibGit2Sharp.Tests.BranchFixture.CanGetTrackingInformationForLocalTrackingBranch" type="LibGit2Sharp.Tests.BranchFixture" method="CanGetTrackingInformationForLocalTrackingBranch" result="Pass" time="0.034" /><test name="LibGit2Sharp.Tests.BranchFixture.CanWalkCommitsFromAnotherBranch" type="LibGit2Sharp.Tests.BranchFixture" method="CanWalkCommitsFromAnotherBranch" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.BranchFixture.CreatingBranchWithUnknownShaTargetThrows" type="LibGit2Sharp.Tests.BranchFixture" method="CreatingBranchWithUnknownShaTargetThrows" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.BranchFixture.CanCreateBranchUsingAbbreviatedSha" type="LibGit2Sharp.Tests.BranchFixture" method="CanCreateBranchUsingAbbreviatedSha" result="Pass" time="0.343" /><test name="LibGit2Sharp.Tests.BranchFixture.CanCreateBranchFromRevparseSpec" type="LibGit2Sharp.Tests.BranchFixture" method="CanCreateBranchFromRevparseSpec" result="Pass" time="0.340" /><test name="LibGit2Sharp.Tests.BranchFixture.QueryUpstreamBranchCanonicalNameForLocalTrackingBranch" type="LibGit2Sharp.Tests.BranchFixture" method="QueryUpstreamBranchCanonicalNameForLocalTrackingBranch" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.BranchFixture.CanCreateBranchFromExplicitHead" type="LibGit2Sharp.Tests.BranchFixture" method="CanCreateBranchFromExplicitHead" result="Pass" time="0.460" /><test name="LibGit2Sharp.Tests.BranchFixture.CanGetTrackingInformationFromBranchSharingNoHistoryWithItsTrackedBranch" type="LibGit2Sharp.Tests.BranchFixture" method="CanGetTrackingInformationFromBranchSharingNoHistoryWithItsTrackedBranch" result="Pass" time="0.631" /><test name="LibGit2Sharp.Tests.BranchFixture.CanLookupABranchByItsCanonicalName" type="LibGit2Sharp.Tests.BranchFixture" method="CanLookupABranchByItsCanonicalName" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.BranchFixture.CreatingABranchFromATagPeelsToTheCommit" type="LibGit2Sharp.Tests.BranchFixture" method="CreatingABranchFromATagPeelsToTheCommit" result="Pass" time="0.419" /><test name="LibGit2Sharp.Tests.BranchFixture.RemovingABranchWhichIsTheCurrentHeadThrows" type="LibGit2Sharp.Tests.BranchFixture" method="RemovingABranchWhichIsTheCurrentHeadThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.BranchFixture.CanListAllBranches" type="LibGit2Sharp.Tests.BranchFixture" method="CanListAllBranches" result="Pass" time="0.011" /><test name="LibGit2Sharp.Tests.BranchFixture.CanLookupLocalBranch" type="LibGit2Sharp.Tests.BranchFixture" method="CanLookupLocalBranch" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.BranchFixture.CanSetUpstreamBranch" type="LibGit2Sharp.Tests.BranchFixture" method="CanSetUpstreamBranch" result="Pass" time="0.456" /><test name="LibGit2Sharp.Tests.BranchFixture.CanListBranchesWithRemoteAndLocalBranchWithSameShortName" type="LibGit2Sharp.Tests.BranchFixture" method="CanListBranchesWithRemoteAndLocalBranchWithSameShortName" result="Pass" time="0.631" /><test name="LibGit2Sharp.Tests.BranchFixture.CreatingABranchTriggersTheCreationOfADirectReference" type="LibGit2Sharp.Tests.BranchFixture" method="CreatingABranchTriggersTheCreationOfADirectReference" result="Pass" time="0.457" /><test name="LibGit2Sharp.Tests.BranchFixture.TwoBranchesPointingAtTheSameCommitAreNotBothCurrent" type="LibGit2Sharp.Tests.BranchFixture" method="TwoBranchesPointingAtTheSameCommitAreNotBothCurrent" result="Pass" time="0.351" /><test name="LibGit2Sharp.Tests.BranchFixture.CreatingABranchFromANonCommitObjectThrows" type="LibGit2Sharp.Tests.BranchFixture" method="CreatingABranchFromANonCommitObjectThrows" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.BranchFixture.TrackedBranchExistsFromDefaultConfigInEmptyClone" type="LibGit2Sharp.Tests.BranchFixture" method="TrackedBranchExistsFromDefaultConfigInEmptyClone" result="Pass" time="0.188" /><test name="LibGit2Sharp.Tests.BranchFixture.CanListAllBranchesIncludingRemoteRefs" type="LibGit2Sharp.Tests.BranchFixture" method="CanListAllBranchesIncludingRemoteRefs" result="Pass" time="0.058" /><test name="LibGit2Sharp.Tests.BranchFixture.CanGetTrackingInformationForTrackingBranch" type="LibGit2Sharp.Tests.BranchFixture" method="CanGetTrackingInformationForTrackingBranch" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.BranchFixture.CanLookupABranchWhichNameIsMadeOfNon7BitsAsciiCharacters" type="LibGit2Sharp.Tests.BranchFixture" method="CanLookupABranchWhichNameIsMadeOfNon7BitsAsciiCharacters" result="Pass" time="0.296" /><test name="LibGit2Sharp.Tests.BranchFixture.CanMoveABranch" type="LibGit2Sharp.Tests.BranchFixture" method="CanMoveABranch" result="Pass" time="0.286" /><test name="LibGit2Sharp.Tests.BranchFixture.BlindlyMovingABranchOverAnExistingOneThrows" type="LibGit2Sharp.Tests.BranchFixture" method="BlindlyMovingABranchOverAnExistingOneThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.BranchFixture.RemovingABranchWithBadParamsThrows" type="LibGit2Sharp.Tests.BranchFixture" method="RemovingABranchWithBadParamsThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.BranchFixture.TrackingInformationIsEmptyForNonTrackingBranch" type="LibGit2Sharp.Tests.BranchFixture" method="TrackingInformationIsEmptyForNonTrackingBranch" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.BranchFixture.CanRemoveANonExistingBranch(branchName: &quot;I-donot-exist&quot;, isRemote: False)" type="LibGit2Sharp.Tests.BranchFixture" method="CanRemoveANonExistingBranch" result="Pass" time="0.419" /><test name="LibGit2Sharp.Tests.BranchFixture.CanRemoveANonExistingBranch(branchName: &quot;me/neither&quot;, isRemote: True)" type="LibGit2Sharp.Tests.BranchFixture" method="CanRemoveANonExistingBranch" result="Pass" time="0.576" /><test name="LibGit2Sharp.Tests.BranchFixture.DetachedHeadIsNotATrackingBranch" type="LibGit2Sharp.Tests.BranchFixture" method="DetachedHeadIsNotATrackingBranch" result="Pass" time="0.465" /><test name="LibGit2Sharp.Tests.BranchFixture.CanListAllBranchesWhenGivenWorkingDir" type="LibGit2Sharp.Tests.BranchFixture" method="CanListAllBranchesWhenGivenWorkingDir" result="Pass" time="0.006" /></class><class time="5.864" name="LibGit2Sharp.Tests.CommitFixture" total="45" passed="45" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommitsFromTwoHeads" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommitsFromTwoHeads" result="Pass" time="0.009" /><test name="LibGit2Sharp.Tests.CommitFixture.CanCommitWithSignatureFromConfig" type="LibGit2Sharp.Tests.CommitFixture" method="CanCommitWithSignatureFromConfig" result="Pass" time="0.176" /><test name="LibGit2Sharp.Tests.CommitFixture.CanCorrectlyCountCommitsWhenSwitchingToAnotherBranch" type="LibGit2Sharp.Tests.CommitFixture" method="CanCorrectlyCountCommitsWhenSwitchingToAnotherBranch" result="Pass" time="0.742" /><test name="LibGit2Sharp.Tests.CommitFixture.DefaultOrderingWhenEnumeratingCommitsIsTimeBased" type="LibGit2Sharp.Tests.CommitFixture" method="DefaultOrderingWhenEnumeratingCommitsIsTimeBased" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.CommitFixture.CanCommitOnOrphanedBranch" type="LibGit2Sharp.Tests.CommitFixture" method="CanCommitOnOrphanedBranch" result="Pass" time="0.226" /><test name="LibGit2Sharp.Tests.CommitFixture.CanCommitALittleBit" type="LibGit2Sharp.Tests.CommitFixture" method="CanCommitALittleBit" result="Pass" time="0.226" /><test name="LibGit2Sharp.Tests.CommitFixture.CommitParentsAreMergeHeads" type="LibGit2Sharp.Tests.CommitFixture" method="CommitParentsAreMergeHeads" result="Pass" time="0.513" /><test name="LibGit2Sharp.Tests.CommitFixture.CanAmendARootCommit" type="LibGit2Sharp.Tests.CommitFixture" method="CanAmendARootCommit" result="Pass" time="0.493" /><test name="LibGit2Sharp.Tests.CommitFixture.CommitCleansUpMergeMetadata" type="LibGit2Sharp.Tests.CommitFixture" method="CommitCleansUpMergeMetadata" result="Pass" time="0.185" /><test name="LibGit2Sharp.Tests.CommitFixture.DirectlyAccessingAnUnknownTreeEntryOfTheCommitReturnsNull" type="LibGit2Sharp.Tests.CommitFixture" method="DirectlyAccessingAnUnknownTreeEntryOfTheCommitReturnsNull" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateUsingImplicitHeadAsSinceBoundary" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateUsingImplicitHeadAsSinceBoundary" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommitsFromSha" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommitsFromSha" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.CommitFixture.CanCountCommits" type="LibGit2Sharp.Tests.CommitFixture" method="CanCountCommits" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.CommitFixture.CanDirectlyAccessATreeOfTheCommit" type="LibGit2Sharp.Tests.CommitFixture" method="CanDirectlyAccessATreeOfTheCommit" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommitsFromATagAnnotation" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommitsFromATagAnnotation" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.CommitFixture.CanNotAmendAnEmptyRepository" type="LibGit2Sharp.Tests.CommitFixture" method="CanNotAmendAnEmptyRepository" result="Pass" time="0.052" /><test name="LibGit2Sharp.Tests.CommitFixture.CanDirectlyAccessABlobOfTheCommit" type="LibGit2Sharp.Tests.CommitFixture" method="CanDirectlyAccessABlobOfTheCommit" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommitsInDetachedHeadState" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommitsInDetachedHeadState" result="Pass" time="0.293" /><test name="LibGit2Sharp.Tests.CommitFixture.QueryingTheCommitHistoryWithUnknownShaOrInvalidEntryPointThrows" type="LibGit2Sharp.Tests.CommitFixture" method="QueryingTheCommitHistoryWithUnknownShaOrInvalidEntryPointThrows" result="Pass" time="0.008" /><test name="LibGit2Sharp.Tests.CommitFixture.QueryingTheCommitHistoryWithBadParamsThrows" type="LibGit2Sharp.Tests.CommitFixture" method="QueryingTheCommitHistoryWithBadParamsThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommitsFromMixedStartingPoints" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommitsFromMixedStartingPoints" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.CommitFixture.CanHideCommitsUsingGlob" type="LibGit2Sharp.Tests.CommitFixture" method="CanHideCommitsUsingGlob" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommits" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommits" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.CommitFixture.CanGetParentsCount" type="LibGit2Sharp.Tests.CommitFixture" method="CanGetParentsCount" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommitsFromAnAnnotatedTag" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommitsFromAnAnnotatedTag" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateFromDetachedHead" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateFromDetachedHead" result="Pass" time="0.444" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateUsingTwoHeadsAsBoundaries" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateUsingTwoHeadsAsBoundaries" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateAllCommits" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateAllCommits" result="Pass" time="0.016" /><test name="LibGit2Sharp.Tests.CommitFixture.QueryingTheCommitHistoryFromACorruptedReferenceThrows" type="LibGit2Sharp.Tests.CommitFixture" method="QueryingTheCommitHistoryFromACorruptedReferenceThrows" result="Pass" time="0.457" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommitsWithTimeSorting" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommitsWithTimeSorting" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommitsFromATagWhichPointsToABlob" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommitsFromATagWhichPointsToABlob" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateFromHead" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateFromHead" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommitsWithReverseTimeSorting" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommitsWithReverseTimeSorting" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.CommitFixture.CanGeneratePredictableObjectShas" type="LibGit2Sharp.Tests.CommitFixture" method="CanGeneratePredictableObjectShas" result="Pass" time="0.132" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommitsWithReverseTopoSorting" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommitsWithReverseTopoSorting" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommitsUsingGlob" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommitsUsingGlob" result="Pass" time="0.009" /><test name="LibGit2Sharp.Tests.CommitFixture.CanReadCommitWithMultipleParents" type="LibGit2Sharp.Tests.CommitFixture" method="CanReadCommitWithMultipleParents" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateUsingTwoAbbreviatedShasAsBoundaries" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateUsingTwoAbbreviatedShasAsBoundaries" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.CommitFixture.CanRetrieveChildrenOfASpecificCommit" type="LibGit2Sharp.Tests.CommitFixture" method="CanRetrieveChildrenOfASpecificCommit" result="Pass" time="0.592" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommitsWithTopoSorting" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommitsWithTopoSorting" result="Pass" time="0.008" /><test name="LibGit2Sharp.Tests.CommitFixture.CanAmendACommitWithMoreThanOneParent" type="LibGit2Sharp.Tests.CommitFixture" method="CanAmendACommitWithMoreThanOneParent" result="Pass" time="0.467" /><test name="LibGit2Sharp.Tests.CommitFixture.CanLookupCommitGeneric" type="LibGit2Sharp.Tests.CommitFixture" method="CanLookupCommitGeneric" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.CommitFixture.CanCorrectlyDistinguishAuthorFromCommitter" type="LibGit2Sharp.Tests.CommitFixture" method="CanCorrectlyDistinguishAuthorFromCommitter" result="Pass" time="0.405" /><test name="LibGit2Sharp.Tests.CommitFixture.CanReadCommitData" type="LibGit2Sharp.Tests.CommitFixture" method="CanReadCommitData" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.CommitFixture.CanEnumerateCommitsFromATagWhichPointsToATree" type="LibGit2Sharp.Tests.CommitFixture" method="CanEnumerateCommitsFromATagWhichPointsToATree" result="Pass" time="0.312" /></class><class time="0.031" name="LibGit2Sharp.Tests.EpochFixture" total="16" passed="16" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.EpochFixture.AreEqual(secondsSinceEpoch: 17, timezoneOffset: -120)" type="LibGit2Sharp.Tests.EpochFixture" method="AreEqual" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.EpochFixture.AreEqual(secondsSinceEpoch: 31, timezoneOffset: 60)" type="LibGit2Sharp.Tests.EpochFixture" method="AreEqual" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.EpochFixture.AreEqual(secondsSinceEpoch: 0, timezoneOffset: 0)" type="LibGit2Sharp.Tests.EpochFixture" method="AreEqual" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.EpochFixture.DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset(formattedDate: &quot;Fri, 13 Feb 2009 23:31:30 +0000&quot;, expectedSeconds: 1234567890, expectedOffset: 0)" type="LibGit2Sharp.Tests.EpochFixture" method="DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.EpochFixture.DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset(formattedDate: &quot;Tue, 26 Oct 2010 17:33:03 +0000&quot;, expectedSeconds: 1288114383, expectedOffset: 0)" type="LibGit2Sharp.Tests.EpochFixture" method="DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset" result="Pass" time="0.008" /><test name="LibGit2Sharp.Tests.EpochFixture.DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset(formattedDate: &quot;Sat, 14 Feb 2009 00:31:30 +0100&quot;, expectedSeconds: 1234567890, expectedOffset: 60)" type="LibGit2Sharp.Tests.EpochFixture" method="DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.EpochFixture.DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset(formattedDate: &quot;Wed, 08 Dec 2010 09:52:32 +0000&quot;, expectedSeconds: 1291801952, expectedOffset: 0)" type="LibGit2Sharp.Tests.EpochFixture" method="DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.EpochFixture.DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset(formattedDate: &quot;Sat, 15 Aug 2009 23:42:58 +0000&quot;, expectedSeconds: 1250379778, expectedOffset: 0)" type="LibGit2Sharp.Tests.EpochFixture" method="DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.EpochFixture.DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset(formattedDate: &quot;Sun, 16 Aug 2009 00:42:58 +0100&quot;, expectedSeconds: 1250379778, expectedOffset: 60)" type="LibGit2Sharp.Tests.EpochFixture" method="DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.EpochFixture.DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset(formattedDate: &quot;Sat, 15 Aug 2009 20:12:58 -0330&quot;, expectedSeconds: 1250379778, expectedOffset: -210)" type="LibGit2Sharp.Tests.EpochFixture" method="DateTimeOffsetShoudlBeCastIntoAUnixTimestampAndATimezoneOffset" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.EpochFixture.UnixTimestampShouldShouldBeCastIntoAPlainUtcDate(secondsSinceEpoch: 1234567890, expected: &quot;Fri, 13 Feb 2009 23:31:30 +0000&quot;)" type="LibGit2Sharp.Tests.EpochFixture" method="UnixTimestampShouldShouldBeCastIntoAPlainUtcDate" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.EpochFixture.UnixTimestampShouldShouldBeCastIntoAPlainUtcDate(secondsSinceEpoch: 1291801952, expected: &quot;Wed, 08 Dec 2010 09:52:32 +0000&quot;)" type="LibGit2Sharp.Tests.EpochFixture" method="UnixTimestampShouldShouldBeCastIntoAPlainUtcDate" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.EpochFixture.UnixTimestampShouldShouldBeCastIntoAPlainUtcDate(secondsSinceEpoch: 1288114383, expected: &quot;Tue, 26 Oct 2010 17:33:03 +0000&quot;)" type="LibGit2Sharp.Tests.EpochFixture" method="UnixTimestampShouldShouldBeCastIntoAPlainUtcDate" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.EpochFixture.UnixTimestampAndTimezoneOffsetShouldBeCastIntoAUtcDateBearingAnOffset(secondsSinceEpoch: 1250379778, offset: -210, expected: &quot;Sat, 15 Aug 2009 20:12:58 -0330&quot;)" type="LibGit2Sharp.Tests.EpochFixture" method="UnixTimestampAndTimezoneOffsetShouldBeCastIntoAUtcDateBearingAnOffset" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.EpochFixture.UnixTimestampShouldBeCastIntoAUtcBasedDateTimeOffset(secondsSinceEpoch: 17)" type="LibGit2Sharp.Tests.EpochFixture" method="UnixTimestampShouldBeCastIntoAUtcBasedDateTimeOffset" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.EpochFixture.UnixTimestampShouldBeCastIntoAUtcBasedDateTimeOffset(secondsSinceEpoch: 0)" type="LibGit2Sharp.Tests.EpochFixture" method="UnixTimestampShouldBeCastIntoAUtcBasedDateTimeOffset" result="Pass" time="0.000" /></class><class time="2.494" name="LibGit2Sharp.Tests.IndexFixture" total="20" passed="20" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.IndexFixture.MovingAFileNotInTheWorkingDirectoryThrows(sourcePath: &quot;i_dont_exist.txt&quot;, sourceStatus: Nonexistent, destPaths: System.String[])" type="LibGit2Sharp.Tests.IndexFixture" method="MovingAFileNotInTheWorkingDirectoryThrows" result="Pass" time="0.024" /><test name="LibGit2Sharp.Tests.IndexFixture.MovingAFileNotInTheWorkingDirectoryThrows(sourcePath: &quot;deleted_unstaged_file.txt&quot;, sourceStatus: Missing, destPaths: System.String[])" type="LibGit2Sharp.Tests.IndexFixture" method="MovingAFileNotInTheWorkingDirectoryThrows" result="Pass" time="0.011" /><test name="LibGit2Sharp.Tests.IndexFixture.MovingAFileNotInTheWorkingDirectoryThrows(sourcePath: &quot;deleted_staged_file.txt&quot;, sourceStatus: Removed, destPaths: System.String[])" type="LibGit2Sharp.Tests.IndexFixture" method="MovingAFileNotInTheWorkingDirectoryThrows" result="Pass" time="0.010" /><test name="LibGit2Sharp.Tests.IndexFixture.MovingOverAnExistingFileThrows(sourcePath: &quot;modified_unstaged_file.txt&quot;, sourceStatus: Modified, destPaths: System.String[])" type="LibGit2Sharp.Tests.IndexFixture" method="MovingOverAnExistingFileThrows" result="Pass" time="0.010" /><test name="LibGit2Sharp.Tests.IndexFixture.MovingOverAnExistingFileThrows(sourcePath: &quot;README&quot;, sourceStatus: Unaltered, destPaths: System.String[])" type="LibGit2Sharp.Tests.IndexFixture" method="MovingOverAnExistingFileThrows" result="Pass" time="0.011" /><test name="LibGit2Sharp.Tests.IndexFixture.MovingOverAnExistingFileThrows(sourcePath: &quot;new_tracked_file.txt&quot;, sourceStatus: Added, destPaths: System.String[])" type="LibGit2Sharp.Tests.IndexFixture" method="MovingOverAnExistingFileThrows" result="Pass" time="0.013" /><test name="LibGit2Sharp.Tests.IndexFixture.MovingOverAnExistingFileThrows(sourcePath: &quot;modified_staged_file.txt&quot;, sourceStatus: Staged, destPaths: System.String[])" type="LibGit2Sharp.Tests.IndexFixture" method="MovingOverAnExistingFileThrows" result="Pass" time="0.010" /><test name="LibGit2Sharp.Tests.IndexFixture.ReadIndexWithBadParamsFails" type="LibGit2Sharp.Tests.IndexFixture" method="ReadIndexWithBadParamsFails" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.IndexFixture.CanReadIndexEntryAttributes" type="LibGit2Sharp.Tests.IndexFixture" method="CanReadIndexEntryAttributes" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.IndexFixture.CanMoveAnExistingFileOverANonExistingFile(sourcePath: &quot;modified_staged_file.txt&quot;, sourceStatus: Staged, destPath: &quot;deleted_unstaged_file.txt&quot;, destStatus: Missing, sourcePostStatus: Removed, destPostStatus: Staged)" type="LibGit2Sharp.Tests.IndexFixture" method="CanMoveAnExistingFileOverANonExistingFile" result="Pass" time="0.425" /><test name="LibGit2Sharp.Tests.IndexFixture.CanMoveAnExistingFileOverANonExistingFile(sourcePath: &quot;modified_unstaged_file.txt&quot;, sourceStatus: Modified, destPath: &quot;deleted_unstaged_file.txt&quot;, destStatus: Missing, sourcePostStatus: Removed, destPostStatus: Staged)" type="LibGit2Sharp.Tests.IndexFixture" method="CanMoveAnExistingFileOverANonExistingFile" result="Pass" time="0.431" /><test name="LibGit2Sharp.Tests.IndexFixture.CanMoveAnExistingFileOverANonExistingFile(sourcePath: &quot;README&quot;, sourceStatus: Unaltered, destPath: &quot;deleted_unstaged_file.txt&quot;, destStatus: Missing, sourcePostStatus: Removed, destPostStatus: Staged)" type="LibGit2Sharp.Tests.IndexFixture" method="CanMoveAnExistingFileOverANonExistingFile" result="Pass" time="0.421" /><test name="LibGit2Sharp.Tests.IndexFixture.CanMoveAnExistingFileOverANonExistingFile(sourcePath: &quot;new_tracked_file.txt&quot;, sourceStatus: Added, destPath: &quot;deleted_unstaged_file.txt&quot;, destStatus: Missing, sourcePostStatus: Nonexistent, destPostStatus: Staged)" type="LibGit2Sharp.Tests.IndexFixture" method="CanMoveAnExistingFileOverANonExistingFile" result="Pass" time="0.821" /><test name="LibGit2Sharp.Tests.IndexFixture.CanFetchAnIndexEntryByItsName" type="LibGit2Sharp.Tests.IndexFixture" method="CanFetchAnIndexEntryByItsName" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.IndexFixture.PathsOfIndexEntriesAreExpressedInNativeFormat" type="LibGit2Sharp.Tests.IndexFixture" method="PathsOfIndexEntriesAreExpressedInNativeFormat" result="Pass" time="0.078" /><test name="LibGit2Sharp.Tests.IndexFixture.FetchingAnUnknownIndexEntryReturnsNull" type="LibGit2Sharp.Tests.IndexFixture" method="FetchingAnUnknownIndexEntryReturnsNull" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.IndexFixture.CanCountEntriesInIndex" type="LibGit2Sharp.Tests.IndexFixture" method="CanCountEntriesInIndex" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.IndexFixture.MovingAFileWichIsNotUnderSourceControlThrows(sourcePath: &quot;new_untracked_file.txt&quot;, sourceStatus: Untracked, destPaths: System.String[])" type="LibGit2Sharp.Tests.IndexFixture" method="MovingAFileWichIsNotUnderSourceControlThrows" result="Pass" time="0.013" /><test name="LibGit2Sharp.Tests.IndexFixture.CanRenameAFile" type="LibGit2Sharp.Tests.IndexFixture" method="CanRenameAFile" result="Pass" time="0.196" /><test name="LibGit2Sharp.Tests.IndexFixture.CanEnumerateIndex" type="LibGit2Sharp.Tests.IndexFixture" method="CanEnumerateIndex" result="Pass" time="0.004" /></class><class time="0.010" name="LibGit2Sharp.Tests.ObjectIdFixture" total="24" passed="24" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.ObjectIdFixture.CanCastNullToObjectId" type="LibGit2Sharp.Tests.ObjectIdFixture" method="CanCastNullToObjectId" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.PreventsFromBuildingWithAnInvalidSha(malformedSha: null, expectedExceptionType: System.ArgumentNullException)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="PreventsFromBuildingWithAnInvalidSha" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.PreventsFromBuildingWithAnInvalidSha(malformedSha: &quot;8e&quot;, expectedExceptionType: System.ArgumentException)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="PreventsFromBuildingWithAnInvalidSha" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.PreventsFromBuildingWithAnInvalidSha(malformedSha: &quot;&quot;, expectedExceptionType: System.ArgumentException)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="PreventsFromBuildingWithAnInvalidSha" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.PreventsFromBuildingWithAnInvalidSha(malformedSha: &quot;ce08fe4884650f067bd5703b6a59a8b3b3c99a09dd&quot;, expectedExceptionType: System.ArgumentException)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="PreventsFromBuildingWithAnInvalidSha" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.PreventsFromBuildingWithAnInvalidSha(malformedSha: &quot;Dummy&quot;, expectedExceptionType: System.ArgumentException)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="PreventsFromBuildingWithAnInvalidSha" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.SimilarObjectIdsAreEqual" type="LibGit2Sharp.Tests.ObjectIdFixture" method="SimilarObjectIdsAreEqual" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.DifferentObjectIdsAreEqual" type="LibGit2Sharp.Tests.ObjectIdFixture" method="DifferentObjectIdsAreEqual" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.DifferentObjectIdsDoesNotHaveSameHashCode" type="LibGit2Sharp.Tests.ObjectIdFixture" method="DifferentObjectIdsDoesNotHaveSameHashCode" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.CanConvertOidToSha" type="LibGit2Sharp.Tests.ObjectIdFixture" method="CanConvertOidToSha" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.CanConvertShaToOid" type="LibGit2Sharp.Tests.ObjectIdFixture" method="CanConvertShaToOid" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.CreatingObjectIdWithWrongNumberOfBytesThrows" type="LibGit2Sharp.Tests.ObjectIdFixture" method="CreatingObjectIdWithWrongNumberOfBytesThrows" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.CanCastShaToObjectId" type="LibGit2Sharp.Tests.ObjectIdFixture" method="CanCastShaToObjectId" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.SimilarObjectIdsHaveSameHashCode" type="LibGit2Sharp.Tests.ObjectIdFixture" method="SimilarObjectIdsHaveSameHashCode" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.TryParse(maybeSha: &quot;0123456&quot;, isValidSha: False)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="TryParse" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.TryParse(maybeSha: &quot;0123&quot;, isValidSha: False)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="TryParse" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.TryParse(maybeSha: &quot;ce08fe4884650f067bd5703b6a59a8b3b3c99a09&quot;, isValidSha: True)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="TryParse" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.TryParse(maybeSha: &quot;Dummy&quot;, isValidSha: False)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="TryParse" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.TryParse(maybeSha: &quot;ce08fe4884650f067bd5703b6a59a8b3b3c99a09d&quot;, isValidSha: False)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="TryParse" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.TryParse(maybeSha: null, isValidSha: False)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="TryParse" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.TryParse(maybeSha: &quot;01&quot;, isValidSha: False)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="TryParse" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.TryParse(maybeSha: &quot;012&quot;, isValidSha: False)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="TryParse" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.TryParse(maybeSha: &quot;&quot;, isValidSha: False)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="TryParse" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ObjectIdFixture.TryParse(maybeSha: &quot;0&quot;, isValidSha: False)" type="LibGit2Sharp.Tests.ObjectIdFixture" method="TryParse" result="Pass" time="0.000" /></class><class time="11.445" name="LibGit2Sharp.Tests.ReferenceFixture" total="60" passed="60" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.ReferenceFixture.RemoveWithNullNameThrows" type="LibGit2Sharp.Tests.ReferenceFixture" method="RemoveWithNullNameThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanUpdateTargetOfADirectReference" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanUpdateTargetOfADirectReference" result="Pass" time="0.313" /><test name="LibGit2Sharp.Tests.ReferenceFixture.MovingAReferenceDoesNotDecreaseTheRefsCount" type="LibGit2Sharp.Tests.ReferenceFixture" method="MovingAReferenceDoesNotDecreaseTheRefsCount" result="Pass" time="0.284" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanAddADirectReference" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanAddADirectReference" result="Pass" time="0.372" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanAddASymbolicReferenceFromTheTargetName" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanAddASymbolicReferenceFromTheTargetName" result="Pass" time="0.467" /><test name="LibGit2Sharp.Tests.ReferenceFixture.AddWithNullForTargetThrows" type="LibGit2Sharp.Tests.ReferenceFixture" method="AddWithNullForTargetThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.ReferenceFixture.RemovingAReferenceDecreasesTheRefsCount" type="LibGit2Sharp.Tests.ReferenceFixture" method="RemovingAReferenceDecreasesTheRefsCount" result="Pass" time="0.348" /><test name="LibGit2Sharp.Tests.ReferenceFixture.LookingForLowerCaseHeadThrows" type="LibGit2Sharp.Tests.ReferenceFixture" method="LookingForLowerCaseHeadThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanIdentifyReferenceKind" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanIdentifyReferenceKind" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.ReferenceFixture.RemoveWithEmptyNameThrows" type="LibGit2Sharp.Tests.ReferenceFixture" method="RemoveWithEmptyNameThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanMoveAReferenceToADifferentReferenceHierarchy" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanMoveAReferenceToADifferentReferenceHierarchy" result="Pass" time="0.445" /><test name="LibGit2Sharp.Tests.ReferenceFixture.MovingANonExistingReferenceThrows" type="LibGit2Sharp.Tests.ReferenceFixture" method="MovingANonExistingReferenceThrows" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanRemoveAReference" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanRemoveAReference" result="Pass" time="0.409" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CreatingADirectReferenceWithARevparseSpecPointingAtAnUnknownObjectFails" type="LibGit2Sharp.Tests.ReferenceFixture" method="CreatingADirectReferenceWithARevparseSpecPointingAtAnUnknownObjectFails" result="Pass" time="0.352" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanTellIfAReferenceIsValid(refname: &quot;refs/heads/sher.lock&quot;, expectedResult: False)" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanTellIfAReferenceIsValid" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanTellIfAReferenceIsValid(refname: &quot;refs/heads/pmiossec-branch&quot;, expectedResult: True)" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanTellIfAReferenceIsValid" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanTellIfAReferenceIsValid(refname: &quot;refs/heads/master&quot;, expectedResult: True)" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanTellIfAReferenceIsValid" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanTellIfAReferenceIsValid(refname: &quot;/&quot;, expectedResult: False)" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanTellIfAReferenceIsValid" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanTellIfAReferenceIsValid(refname: &quot;ALL_CAPS_AND_UNDERSCORE&quot;, expectedResult: True)" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanTellIfAReferenceIsValid" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanTellIfAReferenceIsValid(refname: &quot;refs/stash&quot;, expectedResult: True)" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanTellIfAReferenceIsValid" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanTellIfAReferenceIsValid(refname: &quot;no_lowercase_as_first_level&quot;, expectedResult: False)" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanTellIfAReferenceIsValid" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanTellIfAReferenceIsValid(refname: &quot;refs/heads/pmiossec@{0}&quot;, expectedResult: False)" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanTellIfAReferenceIsValid" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanTellIfAReferenceIsValid(refname: &quot;refs/heads/sher.lock/holmes&quot;, expectedResult: False)" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanTellIfAReferenceIsValid" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanResolveRefsByName" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanResolveRefsByName" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.ReferenceFixture.ResolvingWithEmptyStringThrows" type="LibGit2Sharp.Tests.ReferenceFixture" method="ResolvingWithEmptyStringThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanUpdateHeadWithARevparseSpec" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanUpdateHeadWithARevparseSpec" result="Pass" time="0.348" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanUpdateHeadWithEitherAnObjectIdOrAReference" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanUpdateHeadWithEitherAnObjectIdOrAReference" result="Pass" time="0.341" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanMoveAReferenceToAUpperReferenceHierarchy" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanMoveAReferenceToAUpperReferenceHierarchy" result="Pass" time="0.361" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanResolveReferenceToAnAnnotatedTag" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanResolveReferenceToAnAnnotatedTag" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanUpdateTargetOfADirectReferenceWithARevparseSpec" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanUpdateTargetOfADirectReferenceWithARevparseSpec" result="Pass" time="0.360" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanMoveAReferenceToADeeperReferenceHierarchy" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanMoveAReferenceToADeeperReferenceHierarchy" result="Pass" time="0.669" /><test name="LibGit2Sharp.Tests.ReferenceFixture.AddWithEmptyStringThrows" type="LibGit2Sharp.Tests.ReferenceFixture" method="AddWithEmptyStringThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanLookupAMovedReference" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanLookupAMovedReference" result="Pass" time="0.385" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanMoveAndOverWriteAExistingReference" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanMoveAndOverWriteAExistingReference" result="Pass" time="0.479" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanFilterReferencesWithAGlob" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanFilterReferencesWithAGlob" result="Pass" time="0.010" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanUpdateTargetOfADirectReferenceWithAnAbbreviatedSha" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanUpdateTargetOfADirectReferenceWithAnAbbreviatedSha" result="Pass" time="0.375" /><test name="LibGit2Sharp.Tests.ReferenceFixture.ARemovedReferenceCannotBeLookedUp" type="LibGit2Sharp.Tests.ReferenceFixture" method="ARemovedReferenceCannotBeLookedUp" result="Pass" time="0.321" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanListAllReferencesEvenCorruptedOnes" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanListAllReferencesEvenCorruptedOnes" result="Pass" time="0.330" /><test name="LibGit2Sharp.Tests.ReferenceFixture.UpdatingADirectRefWithSymbolFails" type="LibGit2Sharp.Tests.ReferenceFixture" method="UpdatingADirectRefWithSymbolFails" result="Pass" time="0.384" /><test name="LibGit2Sharp.Tests.ReferenceFixture.BlindlyCreatingASymbolicReferenceOverAnExistingOneThrows" type="LibGit2Sharp.Tests.ReferenceFixture" method="BlindlyCreatingASymbolicReferenceOverAnExistingOneThrows" result="Pass" time="0.699" /><test name="LibGit2Sharp.Tests.ReferenceFixture.AddWithNullStringThrows" type="LibGit2Sharp.Tests.ReferenceFixture" method="AddWithNullStringThrows" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanQueryReachabilityAmongASubsetOfreferences" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanQueryReachabilityAmongASubsetOfreferences" result="Pass" time="0.013" /><test name="LibGit2Sharp.Tests.ReferenceFixture.UpdatingAReferenceTargetWithBadParametersFails" type="LibGit2Sharp.Tests.ReferenceFixture" method="UpdatingAReferenceTargetWithBadParametersFails" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanAddADirectReferenceFromRevParseSpec" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanAddADirectReferenceFromRevParseSpec" result="Pass" time="0.368" /><test name="LibGit2Sharp.Tests.ReferenceFixture.BlindlyCreatingADirectReferenceOverAnExistingOneThrows" type="LibGit2Sharp.Tests.ReferenceFixture" method="BlindlyCreatingADirectReferenceOverAnExistingOneThrows" result="Pass" time="0.397" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanAddAndOverwriteASymbolicReference" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanAddAndOverwriteASymbolicReference" result="Pass" time="0.308" /><test name="LibGit2Sharp.Tests.ReferenceFixture.BlindlyOverwritingAExistingReferenceThrows" type="LibGit2Sharp.Tests.ReferenceFixture" method="BlindlyOverwritingAExistingReferenceThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanResolveReferenceToALightweightTag" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanResolveReferenceToALightweightTag" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.ReferenceFixture.AddWithEmptyStringForTargetThrows" type="LibGit2Sharp.Tests.ReferenceFixture" method="AddWithEmptyStringForTargetThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.ReferenceFixture.UpdatingADirectReferenceTargetWithARevparsePointingAtAnUnknownObjectFails" type="LibGit2Sharp.Tests.ReferenceFixture" method="UpdatingADirectReferenceTargetWithARevparsePointingAtAnUnknownObjectFails" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.ReferenceFixture.ResolvingWithNullThrows" type="LibGit2Sharp.Tests.ReferenceFixture" method="ResolvingWithNullThrows" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanQueryReachability" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanQueryReachability" result="Pass" time="0.018" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanUpdateTheTargetOfASymbolicReferenceWithAnotherSymbolicReference" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanUpdateTheTargetOfASymbolicReferenceWithAnotherSymbolicReference" result="Pass" time="0.104" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanAddASymbolicReferenceFromTheTargetReference" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanAddASymbolicReferenceFromTheTargetReference" result="Pass" time="0.330" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanRemoveANonExistingReference" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanRemoveANonExistingReference" result="Pass" time="0.346" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanUpdateTargetOfADirectReferenceWithAShortReferenceNameAsARevparseSpec" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanUpdateTargetOfADirectReferenceWithAShortReferenceNameAsARevparseSpec" result="Pass" time="0.535" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanResolveHeadByName" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanResolveHeadByName" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanAddAndOverwriteADirectReference" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanAddAndOverwriteADirectReference" result="Pass" time="0.439" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanHandleInvalidArguments" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanHandleInvalidArguments" result="Pass" time="0.010" /><test name="LibGit2Sharp.Tests.ReferenceFixture.CanUpdateTargetOfASymbolicReference" type="LibGit2Sharp.Tests.ReferenceFixture" method="CanUpdateTargetOfASymbolicReference" result="Pass" time="0.459" /></class><class time="3.177" name="LibGit2Sharp.Tests.RepositoryFixture" total="41" passed="41" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.RepositoryFixture.DiscoverReturnsNullWhenNoRepoCanBeFound" type="LibGit2Sharp.Tests.RepositoryFixture" method="DiscoverReturnsNullWhenNoRepoCanBeFound" result="Pass" time="0.008" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanCreateStandardRepoAndSpecifyAFolderWhichWillContainTheNewlyCreatedGitDirectory" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanCreateStandardRepoAndSpecifyAFolderWhichWillContainTheNewlyCreatedGitDirectory" result="Pass" time="0.098" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CreatingRepoWithBadParamsThrows" type="LibGit2Sharp.Tests.RepositoryFixture" method="CreatingRepoWithBadParamsThrows" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanLookupSameObjectTwiceAndTheyAreEqual" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanLookupSameObjectTwiceAndTheyAreEqual" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanCreateStandardRepoAndDirectlySpecifyAGitDirectory" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanCreateStandardRepoAndDirectlySpecifyAGitDirectory" result="Pass" time="0.075" /><test name="LibGit2Sharp.Tests.RepositoryFixture.OpeningNonExistentRepoThrows" type="LibGit2Sharp.Tests.RepositoryFixture" method="OpeningNonExistentRepoThrows" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.RepositoryFixture.LookingUpWithBadParamsThrows" type="LibGit2Sharp.Tests.RepositoryFixture" method="LookingUpWithBadParamsThrows" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanReadRepositoryMessage" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanReadRepositoryMessage" result="Pass" time="0.056" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanReinitARepository" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanReinitARepository" result="Pass" time="0.053" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanOpenRepository" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanOpenRepository" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.RepositoryFixture.LookingUpAGitLinkThrows" type="LibGit2Sharp.Tests.RepositoryFixture" method="LookingUpAGitLinkThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanLookupUsingRevparseSyntax" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanLookupUsingRevparseSyntax" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.RepositoryFixture.QueryingTheRemoteForADetachedHeadBranchReturnsNull" type="LibGit2Sharp.Tests.RepositoryFixture" method="QueryingTheRemoteForADetachedHeadBranchReturnsNull" result="Pass" time="0.447" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanLookupACommitByTheNameOfABranch" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanLookupACommitByTheNameOfABranch" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.RepositoryFixture.LookingUpWithATooShortShaThrows" type="LibGit2Sharp.Tests.RepositoryFixture" method="LookingUpWithATooShortShaThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.RepositoryFixture.LookupObjectByWrongShaReturnsNull" type="LibGit2Sharp.Tests.RepositoryFixture" method="LookupObjectByWrongShaReturnsNull" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanDiscoverABareRepoGivenTheRepoPath" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanDiscoverABareRepoGivenTheRepoPath" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanFetchFromRemoteByName" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanFetchFromRemoteByName" result="Pass" time="1.505" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanLookupACommitByTheNameOfALightweightTag" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanLookupACommitByTheNameOfALightweightTag" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanResolveAmbiguousRevparseSpecs" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanResolveAmbiguousRevparseSpecs" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanDetectIfTheHeadIsOrphaned" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanDetectIfTheHeadIsOrphaned" result="Pass" time="0.375" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanDiscoverAStandardRepoGivenTheRepoPath" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanDiscoverAStandardRepoGivenTheRepoPath" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanDetectShallowness" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanDetectShallowness" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanOpenBareRepositoryThroughAFullPathToTheGitDir" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanOpenBareRepositoryThroughAFullPathToTheGitDir" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.RepositoryFixture.AccessingADeletedHeadThrows" type="LibGit2Sharp.Tests.RepositoryFixture" method="AccessingADeletedHeadThrows" result="Pass" time="0.086" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanCheckIfADirectoryLeadsToAValidRepository" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanCheckIfADirectoryLeadsToAValidRepository" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.RepositoryFixture.AccessingTheIndexInABareRepoThrows" type="LibGit2Sharp.Tests.RepositoryFixture" method="AccessingTheIndexInABareRepoThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanLookupWhithShortIdentifers" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanLookupWhithShortIdentifers" result="Pass" time="0.162" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanLookupObjects" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanLookupObjects" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.RepositoryFixture.ReadingEmptyRepositoryMessageReturnsNull" type="LibGit2Sharp.Tests.RepositoryFixture" method="ReadingEmptyRepositoryMessageReturnsNull" result="Pass" time="0.066" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanLookupATagAnnotationByTheNameOfAnAnnotatedTag" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanLookupATagAnnotationByTheNameOfAnAnnotatedTag" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanDiscoverAStandardRepoGivenASubDirectoryOfTheRepoPath" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanDiscoverAStandardRepoGivenASubDirectoryOfTheRepoPath" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanCreateStandardRepo" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanCreateStandardRepo" result="Pass" time="0.095" /><test name="LibGit2Sharp.Tests.RepositoryFixture.LookupObjectByWrongTypeReturnsNull" type="LibGit2Sharp.Tests.RepositoryFixture" method="LookupObjectByWrongTypeReturnsNull" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanDiscoverABareRepoGivenASubDirectoryOfTheRepoPath" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanDiscoverABareRepoGivenASubDirectoryOfTheRepoPath" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.RepositoryFixture.OpeningStandardRepositoryThroughTheGitDirGuessesTheWorkingDirPath" type="LibGit2Sharp.Tests.RepositoryFixture" method="OpeningStandardRepositoryThroughTheGitDirGuessesTheWorkingDirPath" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanCreateBareRepo" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanCreateBareRepo" result="Pass" time="0.082" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanDiscoverAStandardRepoGivenTheWorkingDirPath" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanDiscoverAStandardRepoGivenTheWorkingDirPath" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.RepositoryFixture.CanOpenStandardRepositoryThroughAWorkingDirPath" type="LibGit2Sharp.Tests.RepositoryFixture" method="CanOpenStandardRepositoryThroughAWorkingDirPath" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.RepositoryFixture.LookupObjectByUnknownReferenceNameReturnsNull" type="LibGit2Sharp.Tests.RepositoryFixture" method="LookupObjectByUnknownReferenceNameReturnsNull" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.RepositoryFixture.OpeningRepositoryWithBadParamsThrows" type="LibGit2Sharp.Tests.RepositoryFixture" method="OpeningRepositoryWithBadParamsThrows" result="Pass" time="0.001" /></class><class time="10.659" name="LibGit2Sharp.Tests.TagFixture" total="51" passed="51" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.TagFixture.CreatingATagWithANonValidNameShouldFail" type="LibGit2Sharp.Tests.TagFixture" method="CreatingATagWithANonValidNameShouldFail" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddAndOverwriteALightweightTag" type="LibGit2Sharp.Tests.TagFixture" method="CanAddAndOverwriteALightweightTag" result="Pass" time="0.379" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddAndOverwriteAnAnnotatedTag" type="LibGit2Sharp.Tests.TagFixture" method="CanAddAndOverwriteAnAnnotatedTag" result="Pass" time="0.410" /><test name="LibGit2Sharp.Tests.TagFixture.LookupNullTagNameThrows" type="LibGit2Sharp.Tests.TagFixture" method="LookupNullTagNameThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TagFixture.CanListAllTagsInAEmptyRepository" type="LibGit2Sharp.Tests.TagFixture" method="CanListAllTagsInAEmptyRepository" result="Pass" time="0.069" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddATagUsingHead" type="LibGit2Sharp.Tests.TagFixture" method="CanAddATagUsingHead" result="Pass" time="0.542" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddATagWithNameContainingASlash" type="LibGit2Sharp.Tests.TagFixture" method="CanAddATagWithNameContainingASlash" result="Pass" time="0.313" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddATagPointingToABlob" type="LibGit2Sharp.Tests.TagFixture" method="CanAddATagPointingToABlob" result="Pass" time="0.459" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddAnAnnotatedTagFromObject" type="LibGit2Sharp.Tests.TagFixture" method="CanAddAnAnnotatedTagFromObject" result="Pass" time="0.320" /><test name="LibGit2Sharp.Tests.TagFixture.BlindlyCreatingALightweightTagOverAnExistingOneThrows" type="LibGit2Sharp.Tests.TagFixture" method="BlindlyCreatingALightweightTagOverAnExistingOneThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TagFixture.AddTagWithNullMessageThrows" type="LibGit2Sharp.Tests.TagFixture" method="AddTagWithNullMessageThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TagFixture.CanListTags" type="LibGit2Sharp.Tests.TagFixture" method="CanListTags" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddALightweightTagFromARevparseSpec" type="LibGit2Sharp.Tests.TagFixture" method="CanAddALightweightTagFromARevparseSpec" result="Pass" time="0.326" /><test name="LibGit2Sharp.Tests.TagFixture.RemovingATagDecreasesTheTagsCount" type="LibGit2Sharp.Tests.TagFixture" method="RemovingATagDecreasesTheTagsCount" result="Pass" time="0.435" /><test name="LibGit2Sharp.Tests.TagFixture.CanLookupAnAnnotatedTag" type="LibGit2Sharp.Tests.TagFixture" method="CanLookupAnAnnotatedTag" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddAnAnnotatedTagFromABranchName" type="LibGit2Sharp.Tests.TagFixture" method="CanAddAnAnnotatedTagFromABranchName" result="Pass" time="0.427" /><test name="LibGit2Sharp.Tests.TagFixture.CreatingATagInAEmptyRepositoryThrows" type="LibGit2Sharp.Tests.TagFixture" method="CreatingATagInAEmptyRepositoryThrows" result="Pass" time="0.079" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddALightWeightTagFromSha" type="LibGit2Sharp.Tests.TagFixture" method="CanAddALightWeightTagFromSha" result="Pass" time="0.384" /><test name="LibGit2Sharp.Tests.TagFixture.CreatingAnAnnotatedTagIsDeterministic" type="LibGit2Sharp.Tests.TagFixture" method="CreatingAnAnnotatedTagIsDeterministic" result="Pass" time="0.318" /><test name="LibGit2Sharp.Tests.TagFixture.CreatingALightweightTagPointingToATagAnnotationGeneratesAnAnnotatedTagReusingThePointedAtTagAnnotation" type="LibGit2Sharp.Tests.TagFixture" method="CreatingALightweightTagPointingToATagAnnotationGeneratesAnAnnotatedTagReusingThePointedAtTagAnnotation" result="Pass" time="0.309" /><test name="LibGit2Sharp.Tests.TagFixture.GetTagByNameWithBadParamsThrows" type="LibGit2Sharp.Tests.TagFixture" method="GetTagByNameWithBadParamsThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TagFixture.CanLookupATagByItsCanonicalName" type="LibGit2Sharp.Tests.TagFixture" method="CanLookupATagByItsCanonicalName" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.TagFixture.AddTagWithNotExistingTargetThrows" type="LibGit2Sharp.Tests.TagFixture" method="AddTagWithNotExistingTargetThrows" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.TagFixture.CanRemoveATagThroughItsName" type="LibGit2Sharp.Tests.TagFixture" method="CanRemoveATagThroughItsName" result="Pass" time="0.301" /><test name="LibGit2Sharp.Tests.TagFixture.AddTagWithEmptyTargetThrows" type="LibGit2Sharp.Tests.TagFixture" method="AddTagWithEmptyTargetThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddALightweightTagFromABranchName" type="LibGit2Sharp.Tests.TagFixture" method="CanAddALightweightTagFromABranchName" result="Pass" time="0.424" /><test name="LibGit2Sharp.Tests.TagFixture.CanRemoveATag" type="LibGit2Sharp.Tests.TagFixture" method="CanRemoveATag" result="Pass" time="0.312" /><test name="LibGit2Sharp.Tests.TagFixture.CreatingATagForHeadInAEmptyRepositoryThrows" type="LibGit2Sharp.Tests.TagFixture" method="CreatingATagForHeadInAEmptyRepositoryThrows" result="Pass" time="0.055" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddALightWeightTagFromAbbreviatedSha" type="LibGit2Sharp.Tests.TagFixture" method="CanAddALightWeightTagFromAbbreviatedSha" result="Pass" time="0.329" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddAnAnnotatedTagFromSha" type="LibGit2Sharp.Tests.TagFixture" method="CanAddAnAnnotatedTagFromSha" result="Pass" time="0.679" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddAnAnnotatedTagFromARevparseSpec" type="LibGit2Sharp.Tests.TagFixture" method="CanAddAnAnnotatedTagFromARevparseSpec" result="Pass" time="0.361" /><test name="LibGit2Sharp.Tests.TagFixture.CreatingADuplicateTagThrows" type="LibGit2Sharp.Tests.TagFixture" method="CreatingADuplicateTagThrows" result="Pass" time="0.297" /><test name="LibGit2Sharp.Tests.TagFixture.CanLookupALightweightTag" type="LibGit2Sharp.Tests.TagFixture" method="CanLookupALightweightTag" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.TagFixture.ARemovedTagCannotBeLookedUp" type="LibGit2Sharp.Tests.TagFixture" method="ARemovedTagCannotBeLookedUp" result="Pass" time="0.468" /><test name="LibGit2Sharp.Tests.TagFixture.AddTagWithNullSignatureThrows" type="LibGit2Sharp.Tests.TagFixture" method="AddTagWithNullSignatureThrows" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.TagFixture.AddTagWithNullNameThrows" type="LibGit2Sharp.Tests.TagFixture" method="AddTagWithNullNameThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TagFixture.CanRemoveATagThroughItsCanonicalName" type="LibGit2Sharp.Tests.TagFixture" method="CanRemoveATagThroughItsCanonicalName" result="Pass" time="0.391" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddATagPointingToATree" type="LibGit2Sharp.Tests.TagFixture" method="CanAddATagPointingToATree" result="Pass" time="0.313" /><test name="LibGit2Sharp.Tests.TagFixture.CreatingATagWithNameMatchingAnAlreadyExistingReferenceHierarchyThrows" type="LibGit2Sharp.Tests.TagFixture" method="CreatingATagWithNameMatchingAnAlreadyExistingReferenceHierarchyThrows" result="Pass" time="0.431" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddAnAnnotatedTagPointingToATagAnnotation" type="LibGit2Sharp.Tests.TagFixture" method="CanAddAnAnnotatedTagPointingToATagAnnotation" result="Pass" time="0.352" /><test name="LibGit2Sharp.Tests.TagFixture.AddTagWithEmptyNameThrows" type="LibGit2Sharp.Tests.TagFixture" method="AddTagWithEmptyNameThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TagFixture.CreatingATagForAnUnknowReferenceThrows" type="LibGit2Sharp.Tests.TagFixture" method="CreatingATagForAnUnknowReferenceThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddAnAnnotatedTagWithAnEmptyMessage" type="LibGit2Sharp.Tests.TagFixture" method="CanAddAnAnnotatedTagWithAnEmptyMessage" result="Pass" time="0.333" /><test name="LibGit2Sharp.Tests.TagFixture.CreatingATagForAnUnknowObjectIdThrows" type="LibGit2Sharp.Tests.TagFixture" method="CreatingATagForAnUnknowObjectIdThrows" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.TagFixture.BlindlyCreatingAnAnnotatedTagOverAnExistingOneThrows" type="LibGit2Sharp.Tests.TagFixture" method="BlindlyCreatingAnAnnotatedTagOverAnExistingOneThrows" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TagFixture.AddTagWithNullTargetThrows" type="LibGit2Sharp.Tests.TagFixture" method="AddTagWithNullTargetThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TagFixture.LookupEmptyTagNameThrows" type="LibGit2Sharp.Tests.TagFixture" method="LookupEmptyTagNameThrows" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TagFixture.AddTagWithADuplicateNameThrows" type="LibGit2Sharp.Tests.TagFixture" method="AddTagWithADuplicateNameThrows" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddATagForImplicitHead" type="LibGit2Sharp.Tests.TagFixture" method="CanAddATagForImplicitHead" result="Pass" time="0.303" /><test name="LibGit2Sharp.Tests.TagFixture.CanAddALightWeightTagFromAGitObject" type="LibGit2Sharp.Tests.TagFixture" method="CanAddALightWeightTagFromAGitObject" result="Pass" time="0.463" /><test name="LibGit2Sharp.Tests.TagFixture.RemovingAnUnknownTagShouldFail" type="LibGit2Sharp.Tests.TagFixture" method="RemovingAnUnknownTagShouldFail" result="Pass" time="0.003" /></class><class time="0.102" name="LibGit2Sharp.Tests.TreeDefinitionFixture" total="31" passed="31" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanReplaceAnExistingGitLinkWithATree" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanReplaceAnExistingGitLinkWithATree" result="Pass" time="0.021" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanAddAnExistingSubmodule" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanAddAnExistingSubmodule" result="Pass" time="0.012" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanBuildATreeDefinitionFromATree" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanBuildATreeDefinitionFromATree" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.RequestingANonExistingEntryReturnsNull" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="RequestingANonExistingEntryReturnsNull" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanAddAnExistingBlob(blobSha: &quot;45b983be36b73c0788dc9cbcb76cbb80fc7bb057&quot;, targetPath: &quot;1/another_one.txt&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanAddAnExistingBlob" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanAddAnExistingBlob(blobSha: &quot;a8233120f6ad708f843d861ce2b7228ec4e3dec6&quot;, targetPath: &quot;README_TOO&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanAddAnExistingBlob" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanAddAnExistingBlob(blobSha: &quot;a8233120f6ad708f843d861ce2b7228ec4e3dec6&quot;, targetPath: &quot;1/README&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanAddAnExistingBlob" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanAddAnExistingBlob(blobSha: &quot;45b983be36b73c0788dc9cbcb76cbb80fc7bb057&quot;, targetPath: &quot;another_one.txt&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanAddAnExistingBlob" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.ModifyingTheContentOfATreeSetsItsOidToNull" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="ModifyingTheContentOfATreeSetsItsOidToNull" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanReplaceAnExistingTreeWithAGitLink" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanReplaceAnExistingTreeWithAGitLink" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.RequestingAnEntryWithBadParamsThrows" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="RequestingAnEntryWithBadParamsThrows" result="Pass" time="0.005" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanAddAnExistingBlobEntryWithAnExistingTree" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanAddAnExistingBlobEntryWithAnExistingTree" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.BuildingATreeDefinitionWithBadParamsThrows" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="BuildingATreeDefinitionWithBadParamsThrows" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanAddAnExistingGitLinkTreeEntryDefinition" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanAddAnExistingGitLinkTreeEntryDefinition" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanReplaceAnExistingGitLinkWithABlob" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanReplaceAnExistingGitLinkWithABlob" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanReplaceAnExistingTreeWithABlob" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanReplaceAnExistingTreeWithABlob" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanReplaceAnExistingBlobWithAGitLink" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanReplaceAnExistingBlobWithAGitLink" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanAddAnExistingTreeEntryDefinition(sourcePath: &quot;1/branch_file.txt&quot;, targetPath: &quot;another_one.txt&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanAddAnExistingTreeEntryDefinition" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanAddAnExistingTreeEntryDefinition(sourcePath: &quot;1/branch_file.txt&quot;, targetPath: &quot;1/another_one.txt&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanAddAnExistingTreeEntryDefinition" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanAddAnExistingTreeEntryDefinition(sourcePath: &quot;1/branch_file.txt&quot;, targetPath: &quot;1/2/another_one.txt&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanAddAnExistingTreeEntryDefinition" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanAddAnExistingTreeEntryDefinition(sourcePath: &quot;README&quot;, targetPath: &quot;README_TOO&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanAddAnExistingTreeEntryDefinition" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanAddAnExistingTreeEntryDefinition(sourcePath: &quot;README&quot;, targetPath: &quot;1/README&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanAddAnExistingTreeEntryDefinition" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanRetrieveEntries(path: &quot;1/branch_file.txt&quot;, expectedAttributes: &quot;100755&quot;, expectedType: Blob, expectedSha: &quot;45b983be36b73c0788dc9cbcb76cbb80fc7bb057&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanRetrieveEntries" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanRetrieveEntries(path: &quot;README&quot;, expectedAttributes: &quot;100644&quot;, expectedType: Blob, expectedSha: &quot;a8233120f6ad708f843d861ce2b7228ec4e3dec6&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanRetrieveEntries" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanRetrieveEntries(path: &quot;branch_file.txt&quot;, expectedAttributes: &quot;100644&quot;, expectedType: Blob, expectedSha: &quot;45b983be36b73c0788dc9cbcb76cbb80fc7bb057&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanRetrieveEntries" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanRetrieveEntries(path: &quot;new.txt&quot;, expectedAttributes: &quot;100644&quot;, expectedType: Blob, expectedSha: &quot;a71586c1dfe8a71c6cbf6c129f404c5642ff31bd&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanRetrieveEntries" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanRetrieveEntries(path: &quot;1&quot;, expectedAttributes: &quot;040000&quot;, expectedType: Tree, expectedSha: &quot;7f76480d939dc401415927ea7ef25c676b8ddb8f&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanRetrieveEntries" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanAddAnExistingTree" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanAddAnExistingTree" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanReplaceAnExistingBlobWithATree(targetPath: &quot;1/branch_file.txt&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanReplaceAnExistingBlobWithATree" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanReplaceAnExistingBlobWithATree(targetPath: &quot;README&quot;)" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanReplaceAnExistingBlobWithATree" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TreeDefinitionFixture.CanNotReplaceAnExistingTreeWithATreeBeingAssembled" type="LibGit2Sharp.Tests.TreeDefinitionFixture" method="CanNotReplaceAnExistingTreeWithATreeBeingAssembled" result="Pass" time="0.006" /></class><class time="0.041" name="LibGit2Sharp.Tests.TreeFixture" total="13" passed="13" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.TreeFixture.GettingAnUknownTreeEntryReturnsNull" type="LibGit2Sharp.Tests.TreeFixture" method="GettingAnUknownTreeEntryReturnsNull" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TreeFixture.CanRetrieveTreeEntryPath" type="LibGit2Sharp.Tests.TreeFixture" method="CanRetrieveTreeEntryPath" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.TreeFixture.CanEnumerateBlobs" type="LibGit2Sharp.Tests.TreeFixture" method="CanEnumerateBlobs" result="Pass" time="0.007" /><test name="LibGit2Sharp.Tests.TreeFixture.CanReadTheTreeData" type="LibGit2Sharp.Tests.TreeFixture" method="CanReadTheTreeData" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TreeFixture.CanCompareTwoTreeEntries" type="LibGit2Sharp.Tests.TreeFixture" method="CanCompareTwoTreeEntries" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TreeFixture.CanConvertEntryToTree" type="LibGit2Sharp.Tests.TreeFixture" method="CanConvertEntryToTree" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TreeFixture.CanGetEntryCountFromTree" type="LibGit2Sharp.Tests.TreeFixture" method="CanGetEntryCountFromTree" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TreeFixture.CanEnumerateTreeEntries" type="LibGit2Sharp.Tests.TreeFixture" method="CanEnumerateTreeEntries" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.TreeFixture.CanEnumerateSubTrees" type="LibGit2Sharp.Tests.TreeFixture" method="CanEnumerateSubTrees" result="Pass" time="0.003" /><test name="LibGit2Sharp.Tests.TreeFixture.CanGetEntryByName" type="LibGit2Sharp.Tests.TreeFixture" method="CanGetEntryByName" result="Pass" time="0.004" /><test name="LibGit2Sharp.Tests.TreeFixture.CanConvertEntryToBlob" type="LibGit2Sharp.Tests.TreeFixture" method="CanConvertEntryToBlob" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TreeFixture.CanReadEntryAttributes" type="LibGit2Sharp.Tests.TreeFixture" method="CanReadEntryAttributes" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TreeFixture.TreeDataIsPresent" type="LibGit2Sharp.Tests.TreeFixture" method="TreeDataIsPresent" result="Pass" time="0.002" /></class><class time="0.005" name="LibGit2Sharp.Tests.TupleFixture" total="5" passed="5" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.TupleFixture.VerifyNotEquals" type="LibGit2Sharp.Tests.TupleFixture" method="VerifyNotEquals" result="Pass" time="0.002" /><test name="LibGit2Sharp.Tests.TupleFixture.Properties" type="LibGit2Sharp.Tests.TupleFixture" method="Properties" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.TupleFixture.GetHashCodeIsDifferent" type="LibGit2Sharp.Tests.TupleFixture" method="GetHashCodeIsDifferent" result="Pass" time="0.001" /><test name="LibGit2Sharp.Tests.TupleFixture.GetHashCodeIsTheSame" type="LibGit2Sharp.Tests.TupleFixture" method="GetHashCodeIsTheSame" result="Pass" time="0.000" /><test name="LibGit2Sharp.Tests.TupleFixture.VerifyEquals" type="LibGit2Sharp.Tests.TupleFixture" method="VerifyEquals" result="Pass" time="0.001" /></class><class time="9.379" name="LibGit2Sharp.Tests.UnstageFixture" total="21" passed="21" failed="0" skipped="0"><test name="LibGit2Sharp.Tests.UnstageFixture.UnstagingUnknownPathsWithStrictUnmatchedExplicitPathsValidationThrows(relativePath: &quot;new_untracked_file.txt&quot;, currentStatus: Untracked)" type="LibGit2Sharp.Tests.UnstageFixture" method="UnstagingUnknownPathsWithStrictUnmatchedExplicitPathsValidationThrows" result="Pass" time="0.876" /><test name="LibGit2Sharp.Tests.UnstageFixture.UnstagingUnknownPathsWithStrictUnmatchedExplicitPathsValidationThrows(relativePath: &quot;where-am-I.txt&quot;, currentStatus: Nonexistent)" type="LibGit2Sharp.Tests.UnstageFixture" method="UnstagingUnknownPathsWithStrictUnmatchedExplicitPathsValidationThrows" result="Pass" time="0.497" /><test name="LibGit2Sharp.Tests.UnstageFixture.UnstagingANewFileWithAFullPathWhichEscapesOutOfTheWorkingDirThrows" type="LibGit2Sharp.Tests.UnstageFixture" method="UnstagingANewFileWithAFullPathWhichEscapesOutOfTheWorkingDirThrows" result="Pass" time="0.441" /><test name="LibGit2Sharp.Tests.UnstageFixture.CanUnstageUnknownPathsAgainstAnOrphanedHeadWithLaxUnmatchedExplicitPathsValidation(relativePath: &quot;new_untracked_file.txt&quot;, currentStatus: Untracked)" type="LibGit2Sharp.Tests.UnstageFixture" method="CanUnstageUnknownPathsAgainstAnOrphanedHeadWithLaxUnmatchedExplicitPathsValidation" result="Pass" time="0.599" /><test name="LibGit2Sharp.Tests.UnstageFixture.CanUnstageUnknownPathsAgainstAnOrphanedHeadWithLaxUnmatchedExplicitPathsValidation(relativePath: &quot;where-am-I.txt&quot;, currentStatus: Nonexistent)" type="LibGit2Sharp.Tests.UnstageFixture" method="CanUnstageUnknownPathsAgainstAnOrphanedHeadWithLaxUnmatchedExplicitPathsValidation" result="Pass" time="0.428" /><test name="LibGit2Sharp.Tests.UnstageFixture.CanUnstageTheRemovalOfAFile" type="LibGit2Sharp.Tests.UnstageFixture" method="CanUnstageTheRemovalOfAFile" result="Pass" time="0.642" /><test name="LibGit2Sharp.Tests.UnstageFixture.CanStageAndUnstageAnIgnoredFile" type="LibGit2Sharp.Tests.UnstageFixture" method="CanStageAndUnstageAnIgnoredFile" result="Pass" time="0.542" /><test name="LibGit2Sharp.Tests.UnstageFixture.CanUnstageUnknownPathsWithLaxUnmatchedExplicitPathsValidation(relativePath: &quot;new_untracked_file.txt&quot;, currentStatus: Untracked)" type="LibGit2Sharp.Tests.UnstageFixture" method="CanUnstageUnknownPathsWithLaxUnmatchedExplicitPathsValidation" result="Pass" time="0.421" /><test name="LibGit2Sharp.Tests.UnstageFixture.CanUnstageUnknownPathsWithLaxUnmatchedExplicitPathsValidation(relativePath: &quot;where-am-I.txt&quot;, currentStatus: Nonexistent)" type="LibGit2Sharp.Tests.UnstageFixture" method="CanUnstageUnknownPathsWithLaxUnmatchedExplicitPathsValidation" result="Pass" time="0.442" /><test name="LibGit2Sharp.Tests.UnstageFixture.UnstagingUnknownPathsAgainstAnOrphanedHeadWithStrictUnmatchedExplicitPathsValidationThrows(relativePath: &quot;new_untracked_file.txt&quot;, currentStatus: Untracked)" type="LibGit2Sharp.Tests.UnstageFixture" method="UnstagingUnknownPathsAgainstAnOrphanedHeadWithStrictUnmatchedExplicitPathsValidationThrows" result="Pass" time="0.419" /><test name="LibGit2Sharp.Tests.UnstageFixture.UnstagingUnknownPathsAgainstAnOrphanedHeadWithStrictUnmatchedExplicitPathsValidationThrows(relativePath: &quot;where-am-I.txt&quot;, currentStatus: Nonexistent)" type="LibGit2Sharp.Tests.UnstageFixture" method="UnstagingUnknownPathsAgainstAnOrphanedHeadWithStrictUnmatchedExplicitPathsValidationThrows" result="Pass" time="0.586" /><test name="LibGit2Sharp.Tests.UnstageFixture.CanUnstageUntrackedFileAgainstAnOrphanedHead" type="LibGit2Sharp.Tests.UnstageFixture" method="CanUnstageUntrackedFileAgainstAnOrphanedHead" result="Pass" time="0.063" /><test name="LibGit2Sharp.Tests.UnstageFixture.UnstagingFileWithBadParamsThrows" type="LibGit2Sharp.Tests.UnstageFixture" method="UnstagingFileWithBadParamsThrows" result="Pass" time="0.006" /><test name="LibGit2Sharp.Tests.UnstageFixture.StagingANewVersionOfAFileThenUnstagingItRevertsTheBlobToTheVersionOfHead" type="LibGit2Sharp.Tests.UnstageFixture" method="StagingANewVersionOfAFileThenUnstagingItRevertsTheBlobToTheVersionOfHead" result="Pass" time="0.413" /><test name="LibGit2Sharp.Tests.UnstageFixture.CanUnstage(relativePath: &quot;modified_staged_file.txt&quot;, currentStatus: Staged, doesCurrentlyExistInTheIndex: True, expectedStatusOnceStaged: Modified, doesExistInTheIndexOnceStaged: True, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.UnstageFixture" method="CanUnstage" result="Pass" time="0.663" /><test name="LibGit2Sharp.Tests.UnstageFixture.CanUnstage(relativePath: &quot;1/branch_file.txt&quot;, currentStatus: Unaltered, doesCurrentlyExistInTheIndex: True, expectedStatusOnceStaged: Unaltered, doesExistInTheIndexOnceStaged: True, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.UnstageFixture" method="CanUnstage" result="Pass" time="0.410" /><test name="LibGit2Sharp.Tests.UnstageFixture.CanUnstage(relativePath: &quot;deleted_unstaged_file.txt&quot;, currentStatus: Missing, doesCurrentlyExistInTheIndex: True, expectedStatusOnceStaged: Missing, doesExistInTheIndexOnceStaged: True, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.UnstageFixture" method="CanUnstage" result="Pass" time="0.531" /><test name="LibGit2Sharp.Tests.UnstageFixture.CanUnstage(relativePath: &quot;modified_unstaged_file.txt&quot;, currentStatus: Modified, doesCurrentlyExistInTheIndex: True, expectedStatusOnceStaged: Modified, doesExistInTheIndexOnceStaged: True, expectedIndexCountVariation: 0)" type="LibGit2Sharp.Tests.UnstageFixture" method="CanUnstage" result="Pass" time="0.518" /><test name="LibGit2Sharp.Tests.UnstageFixture.CanUnstage(relativePath: &quot;new_tracked_file.txt&quot;, currentStatus: Added, doesCurrentlyExistInTheIndex: True, expectedStatusOnceStaged: Untracked, doesExistInTheIndexOnceStaged: False, expectedIndexCountVariation: -1)" type="LibGit2Sharp.Tests.UnstageFixture" method="CanUnstage" result="Pass" time="0.409" /><test name="LibGit2Sharp.Tests.UnstageFixture.CanUnstage(relativePath: &quot;deleted_staged_file.txt&quot;, currentStatus: Removed, doesCurrentlyExistInTheIndex: False, expectedStatusOnceStaged: Missing, doesExistInTheIndexOnceStaged: True, expectedIndexCountVariation: 1)" type="LibGit2Sharp.Tests.UnstageFixture" method="CanUnstage" result="Pass" time="0.408" /><test name="LibGit2Sharp.Tests.UnstageFixture.UnstagingANewFileWithAFullPathWhichEscapesOutOfTheWorkingDirAgainstAnOrphanedHeadThrows" type="LibGit2Sharp.Tests.UnstageFixture" method="UnstagingANewFileWithAFullPathWhichEscapesOutOfTheWorkingDirAgainstAnOrphanedHeadThrows" result="Pass" time="0.065" /></class></assembly></assemblies>